{"version":3,"file":"server.bb2204cc07241655653c.hot-update.js","sources":["webpack:///./src/views/Trading.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport * as ethers from 'ethers'\r\nimport * as strftime from 'strftime'\r\n\r\nimport { urlWithParams, tsToIso } from '../helpers'\r\nimport { useRequest } from '../dataProvider'\r\n\r\nimport {\r\n  LineChart,\r\n  BarChart,\r\n  Line,\r\n  Bar,\r\n  Label,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n  ReferenceLine,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart\r\n} from 'recharts';\r\n\r\nconst { BigNumber } = ethers\r\nconst { formatUnits} = ethers.utils\r\n\r\n\r\nfunction Trading() {\r\n  const [from, setFrom] = useState(tsToIso(Date.now() - 86400000 * 3))\r\n  const [to, setTo] = useState()\r\n\r\n  const fromTs = +new Date(from) / 1000\r\n  const toTs = to ?? +new Date(to) / 1000\r\n\r\n  const params = {from: fromTs, to: toTs}\r\n  const [btcData] = useRequest(urlWithParams(`/api/prices/BTC`, params), [])\r\n  const [ethData] = useRequest(urlWithParams(`/api/prices/ETH`, params), [])\r\n  const [bnbData] = useRequest(urlWithParams(`/api/prices/BNB`, params), [])\r\n\r\n  const assetChartData = useMemo(() => {\r\n    const all = {}\r\n    const options = [\r\n      ['BTC', btcData],\r\n      ['ETH', ethData],\r\n      ['BNB', bnbData]\r\n    ]\r\n\r\n    options.forEach(([name, assetData]) => {\r\n      if (!assetData || assetData.length === 0) {\r\n        return\r\n      }\r\n      let maxPrice = 0\r\n      let minPrice = Infinity\r\n      all[name] = {\r\n        data: assetData.map(item => {\r\n          const price = item.price / 1e8\r\n          if (price > maxPrice) {\r\n            maxPrice = price\r\n          }\r\n          if (price < minPrice) {\r\n            minPrice = price\r\n          }\r\n          return {\r\n            date: new Date(item.timestamp * 1000),\r\n            price: price,\r\n            poolAmount: item.poolAmount\r\n          }\r\n        })\r\n      }\r\n      all[name].maxPrice = maxPrice\r\n      all[name].minPrice = minPrice\r\n    })\r\n\r\n    return all\r\n  }, [btcData, ethData, bnbData])\r\n\r\n  const [pnlData] = useRequest(urlWithParams('/api/marginPnl', params), [])\r\n  const pnlChartData = useMemo(() => {\r\n    return pnlData.map(item => {\r\n      if (!item.metrics) {\r\n        return {\r\n          date: new Date(item.timestamp * 1000)\r\n        }\r\n      }\r\n      return {\r\n        date: new Date(item.timestamp * 1000),\r\n        net: item.metrics.net,\r\n        profits: item.metrics.profits,\r\n        loss: item.metrics.loss,\r\n        long: item.metrics.long,\r\n        short: item.metrics.short,\r\n      } \r\n    })\r\n  }, [pnlData])\r\n  const pnlMin = pnlChartData.length ? pnlChartData[pnlChartData.length - 1].loss : 0\r\n  const pnlMax = pnlChartData.length ? pnlChartData[pnlChartData.length - 1].profits : 0\r\n\r\n  const [liquidationsData] = useRequest(urlWithParams('api/liquidations', {from: fromTs, to: toTs}), [])\r\n  const liquidationsChartData = useMemo(() => {\r\n    let cum = 0\r\n    let longCum = 0\r\n    let shortCum = 0\r\n    return liquidationsData.map(item => {\r\n      const collateral = item.collateral || 0\r\n      cum += collateral\r\n      if (item.isLong) {\r\n        longCum += collateral\r\n      } else {\r\n        shortCum += collateral\r\n      }\r\n      return {\r\n        date: new Date(item.timestamp * 1000),\r\n        collateral: cum,\r\n        long: longCum,\r\n        short: shortCum\r\n      }\r\n    })\r\n  }, [liquidationsData])\r\n\r\n  const [feesData] = useRequest(urlWithParams('/api/fees', { disableGrouping: 1, ...params }), [])\r\n  const feesChartData = useMemo(() => {\r\n    const cum = {}\r\n    return feesData.map(item => {\r\n      cum[item.type] = (cum[item.type] || 0) + item.value\r\n      const all = Object.values(cum).reduce((sum, value) => sum + value)\r\n      return {\r\n        ...cum,\r\n        all,\r\n        date: new Date(item.timestamp * 1000)\r\n      }\r\n    })\r\n  }, [feesData])\r\n\r\n  const [swapSourcesData] = useRequest(urlWithParams('/api/swapSources', { period: 3600, rawSource: 1, ...params }), [])\r\n  const swapSourcesFilteredKeys = useMemo(() => {\r\n    if (swapSourcesData.length === 0) {\r\n      return []\r\n    }\r\n    const count = {}\r\n    swapSourcesData.forEach(item => {\r\n      if (!item.metrics) {\r\n        return\r\n      }\r\n      Object.keys(item.metrics).forEach(key => {\r\n        count[key] = (count[key] || 0) + 1\r\n      })\r\n    })\r\n\r\n    return Object.keys(count).filter(key => count[key] > 1)\r\n  }, [swapSourcesData])\r\n  const swapSourcesChartData = useMemo(() => {\r\n    if (swapSourcesFilteredKeys.length === 0) {\r\n      return []\r\n    }\r\n\r\n    let cum = {}\r\n    return swapSourcesData.map(item => {\r\n      let all = 0\r\n      swapSourcesFilteredKeys.forEach(key => {\r\n        if (item.metrics && item.metrics[key]) {\r\n          cum[key] = (cum[key] || 0) + item.metrics[key]\r\n          all += cum[key]\r\n        }\r\n      })\r\n      return {\r\n        date: new Date(item.timestamp * 1000),\r\n        all,\r\n        ...cum\r\n      }\r\n    })\r\n  }, [swapSourcesData, swapSourcesFilteredKeys])\r\n\r\n  const COLORS = ['red', 'green', 'blue', 'lightblue', 'purple', 'pink', 'brown', 'orange']\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <p>\r\n          <label>From</label>\r\n          <input type=\"datetime-local\" value={from} onChange={evt => setFrom(evt.target.value)} />\r\n        </p>\r\n        <p>\r\n          <label>To</label>\r\n          <input type=\"datetime-local\" value={to} onChange={evt => setTo(evt.target.value)} />\r\n        </p>\r\n      </div>     \r\n      {Object.entries(assetChartData).map(([name, {data, maxPrice, minPrice}]) => {\r\n        return <div key={name}>\r\n          <h2>{name}</h2>\r\n          <ResponsiveContainer width=\"100%\" height={600}>\r\n            <ComposedChart\r\n              data={data}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"10 10\" />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis\r\n                yAxisId=\"left\"\r\n                dataKey=\"price\"\r\n                domain={[Math.round(minPrice * 0.99), Math.round(maxPrice * 1.01)]}\r\n              />\r\n              <YAxis yAxisId=\"right\" orientation=\"right\" dataKey=\"poolAmount\" />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Area isAnimationActive={false} strokeWidth={0} yAxisId=\"right\" dataKey=\"poolAmount\" name=\"Pool\" dot={false} fill=\"#627EEA\" />\r\n              <Line isAnimationActive={false} yAxisId=\"left\" dataKey=\"price\" name=\"Chainlink Price\" dot={false} stroke=\"#666\" strokeWidth={2} />\r\n            </ComposedChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      })}\r\n\r\n      <h2>Liquidated Collateral</h2>\r\n      <ResponsiveContainer width=\"100%\" height={600}>\r\n        <ComposedChart\r\n          data={liquidationsChartData}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"10 10\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis dataKey=\"collateral\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Area isAnimationActive={false} stackId=\"a\" dataKey=\"long\" name=\"Long\" dot={false} strokeWidth={0} stroke=\"purple\" fill=\"purple\" />\r\n          <Area isAnimationActive={false} stackId=\"a\" dataKey=\"short\" name=\"Short\" dot={false} stroke=\"green\" strokeWidth={0} fill=\"green\" />\r\n          <Line isAnimationActive={false} dataKey=\"collateral\" name=\"All\" dot={false} stroke=\"black\" strokeWidth={2} />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n\r\n      <h2>Global PnL</h2>\r\n      <ResponsiveContainer width=\"100%\" height={600}>\r\n        <ComposedChart\r\n          data={pnlChartData}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"10 10\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis domain={[pnlMin * 1.5, pnlMax * 0.50]} />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Area isAnimationActive={false} dataKey=\"profits\" name=\"Profits\" dot={false} strokeWidth={0} fill=\"lightblue\" />\r\n          <Area isAnimationActive={false} dataKey=\"loss\" name=\"Loss\" dot={false} stroke=\"pink\" strokeWidth={0} fill=\"pink\" />\r\n          <Line isAnimationActive={false} dataKey=\"net\" name=\"Net\" dot={false} stroke=\"#000\" strokeWidth={2} />\r\n          <Line isAnimationActive={false} dataKey=\"long\" name=\"Longs Net\" dot={false} stroke=\"green\" strokeWidth={1} />\r\n          <Line isAnimationActive={false} dataKey=\"short\" name=\"Shorts Net\" dot={false} stroke=\"red\" strokeWidth={1} />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n\r\n      <h2>Fees</h2>\r\n      <ResponsiveContainer width=\"100%\" height={600}>\r\n        <ComposedChart syncId=\"syncId\" data={feesChartData}>\r\n          <CartesianGrid strokeDasharray=\"10 10\" />\r\n          <XAxis dataKey=\"date\" minTickGap={30} />\r\n          <YAxis dataKey=\"all\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Area type=\"monotone\" dot={false} dataKey=\"swap\" stackId=\"a\" name=\"Swap\" stroke=\"#FE88B1\" fill=\"#FE88B1\" />\r\n          <Area type=\"monotone\" dot={false} dataKey=\"mint\" stackId=\"a\" name=\"Mint USDS\" stroke=\"#C9DB74\" fill=\"#C9DB74\" />\r\n          <Area type=\"monotone\" dot={false} dataKey=\"burn\" stackId=\"a\" name=\"Burn USDS\" stroke=\"#ab6100\" fill=\"#ab6100\" />\r\n          <Area type=\"monotone\" dot={false} dataKey=\"liquidation\" stackId=\"a\" name=\"Liquidation\" stroke=\"#c90000\" fill=\"#c90000\" />\r\n          <Area type=\"monotone\" dot={false} dataKey=\"margin\" stackId=\"a\" name=\"Margin trading\" stroke=\"#5D69B1\" fill=\"#5D69B1\" />\r\n          <Line isAnimationActive={false} dot={false} dataKey=\"all\" name=\"Total\" stroke=\"#000\" />\r\n        </ComposedChart>\r\n      </ResponsiveContainer>\r\n\r\n      <h2>Swap volumes by recipient</h2>\r\n      <ResponsiveContainer width=\"100%\" height={600}>\r\n        <LineChart syncId=\"syncId\" data={swapSourcesChartData}>\r\n          <CartesianGrid strokeDasharray=\"10 10\" />\r\n          <XAxis dataKey=\"date\" minTickGap={30} />\r\n          <YAxis dataKey=\"all\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          {swapSourcesFilteredKeys.map((key, i) => {\r\n            return <Line dataKey={key} dot={false} stroke={COLORS[i % COLORS.length]} />\r\n          })}\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Trading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AAEA;;;;A","sourceRoot":""}