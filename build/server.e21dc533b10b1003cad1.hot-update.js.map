{"version":3,"file":"server.e21dc533b10b1003cad1.hot-update.js","sources":["webpack:///./src/views/Optimism.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useMemo } from \"react\";\r\nimport * as ethers from \"ethers\";\r\nimport moment from \"moment\";\r\nimport { RiLoader5Fill } from \"react-icons/ri\";\r\nimport cx from \"classnames\";\r\n\r\nimport {\r\n  yaxisFormatterNumber,\r\n  yaxisFormatterPercent,\r\n  yaxisFormatter,\r\n  tooltipLabelFormatter,\r\n  tooltipLabelFormatterUnits,\r\n  tooltipFormatter,\r\n  tooltipFormatterNumber,\r\n  tooltipFormatterPercent,\r\n  formatNumber,\r\n  CHART_HEIGHT,\r\n  YAXIS_WIDTH,\r\n  COLORS\r\n} from \"../helpers\";\r\n\r\nimport {\r\n  LineChart,\r\n  BarChart,\r\n  Line,\r\n  Bar,\r\n  Label,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n  ReferenceLine,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Cell,\r\n  PieChart,\r\n  Pie,\r\n} from \"recharts\";\r\n\r\nimport ChartWrapper from \"../components/ChartWrapper\";\r\nimport VolumeChart from \"../components/VolumeChart\";\r\nimport FeesChart from \"../components/FeesChart\";\r\nimport GenericChart from \"../components/GenericChart\";\r\n\r\nimport {\r\n  useVolumeData,\r\n  useTotalVolumeFromServer,\r\n  useVolumeDataFromServer,\r\n  useFeesData,\r\n  useMjlpData,\r\n  useAumPerformanceData,\r\n  useCoingeckoPrices,\r\n  useMjlpPerformanceData,\r\n  useTradersData,\r\n  useSwapSources,\r\n  useFundingRateData,\r\n  useUsersData,\r\n  useLastSubgraphBlock,\r\n  useLastBlock,\r\n} from \"../dataProvider\";\r\n\r\nconst { BigNumber } = ethers;\r\nconst { formatUnits } = ethers.utils;\r\nconst NOW = Math.floor(Date.now() / 1000);\r\n\r\nfunction Optimism(props) {\r\n  const DEFAULT_GROUP_PERIOD = 86400;\r\n  const [groupPeriod, setGroupPeriod] = useState(DEFAULT_GROUP_PERIOD);\r\n\r\n  const [fromValue, setFromValue] = useState();\r\n  const [toValue, setToValue] = useState();\r\n\r\n  const { mode } = props;\r\n\r\n  const setDateRange = useCallback(\r\n    (range) => {\r\n      setFromValue(\r\n        new Date(Date.now() - range * 1000).toISOString().slice(0, 10)\r\n      );\r\n      setToValue(undefined);\r\n    },\r\n    [setFromValue, setToValue]\r\n  );\r\n\r\n  const from = fromValue ? +new Date(fromValue) / 1000 : undefined;\r\n  const to = toValue ? +new Date(toValue) / 1000 : NOW;\r\n\r\n  const params = { from, to, groupPeriod };\r\n\r\n  const [fundingRateData, fundingRateLoading] = useFundingRateData(params);\r\n  // const [volumeData, volumeLoading] = useVolumeDataFromServer(params);\r\n  const [volumeData, totalVolume, volumeLoading] = useVolumeData(params);\r\n  //const [totalVolume] = useTotalVolumeFromServer();\r\n  const totalVolumeDelta = useMemo(() => {\r\n    if (!volumeData || volumeData.length == 0) {\r\n      return null;\r\n    }\r\n    return volumeData[volumeData.length - 1].all;\r\n  }, [volumeData]);\r\n\r\n  const [feesData, feesLoading] = useFeesData(params);\r\n  const [totalFees, totalFeesDelta] = useMemo(() => {\r\n    if (!feesData) {\r\n      return [];\r\n    }\r\n    const total = feesData[feesData.length - 1]?.cumulative;\r\n    const delta = total - feesData[feesData.length - 2]?.cumulative;\r\n    return [total, delta];\r\n  }, [feesData]);\r\n\r\n  const [mjlpData, mjlpLoading] = useMjlpData(params);\r\n  const [totalAum, totalAumDelta] = useMemo(() => {\r\n    if (!mjlpData) {\r\n      return [];\r\n    }\r\n    const total = mjlpData[mjlpData.length - 1]?.aum;\r\n    const delta = total - mjlpData[mjlpData.length - 2]?.aum;\r\n    return [total, delta];\r\n  }, [mjlpData]);\r\n\r\n  const [aumPerformanceData, aumPerformanceLoading] =\r\n    useAumPerformanceData(params);\r\n\r\n  const [mjlpPerformanceData, mjlpPerformanceLoading] = useMjlpPerformanceData(\r\n    mjlpData,\r\n    feesData,\r\n    params\r\n  );\r\n\r\n  const [tradersData, tradersLoading] = useTradersData(params);\r\n  const [openInterest, openInterestDelta] = useMemo(() => {\r\n    if (!tradersData) {\r\n      return [];\r\n    }\r\n    const total = tradersData.data[tradersData.data.length - 1]?.openInterest;\r\n    const delta =\r\n      total - tradersData.data[tradersData.data.length - 2]?.openInterest;\r\n    return [total, delta];\r\n  }, [tradersData]);\r\n  const [swapSources, swapSourcesLoading] = useSwapSources(params);\r\n  const swapSourcesKeys = Object.keys(\r\n    (swapSources || []).reduce((memo, el) => {\r\n      Object.keys(el).forEach((key) => {\r\n        if (key === \"all\" || key === \"timestamp\") return;\r\n        memo[key] = true;\r\n      });\r\n      return memo;\r\n    }, {})\r\n  );\r\n\r\n  const [usersData, usersLoading] = useUsersData(params);\r\n  const [totalUsers, totalUsersDelta] = useMemo(() => {\r\n    if (!usersData) {\r\n      return [null, null];\r\n    }\r\n    const total = usersData[usersData.length - 1]?.uniqueCountCumulative;\r\n    const prevTotal = usersData[usersData.length - 2]?.uniqueCountCumulative;\r\n    const delta = total && prevTotal ? total - prevTotal : null;\r\n    return [total, delta];\r\n  }, [usersData]);\r\n\r\n  const [lastSubgraphBlock] = useLastSubgraphBlock();\r\n  const [lastBlock] = useLastBlock();\r\n\r\n  const isObsolete =\r\n    lastSubgraphBlock &&\r\n    lastBlock &&\r\n    lastBlock.timestamp - lastSubgraphBlock.timestamp > 3600;\r\n\r\n  const [isExperiment, setIsExperiment] = useState(false);\r\n  useEffect(() => {\r\n    setIsExperiment(window.localStorage.getItem(\"experiment\"));\r\n  }, [setIsExperiment]);\r\n\r\n  const showForm = false;\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <h1>Analytics / Optimism</h1>\r\n      {lastSubgraphBlock && lastBlock && (\r\n        <p\r\n          className={cx(\"page-description\", { warning: isObsolete })}\r\n          style={{ marginTop: \"-1rem\" }}\r\n        >\r\n          {isObsolete && \"Data is obsolete. \"}\r\n          Updated {moment(lastSubgraphBlock.timestamp * 1000).fromNow()}\r\n          &nbsp;at block{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            href={`https://optimistic.etherscan.io/block/${lastSubgraphBlock.number}`}\r\n          >\r\n            {lastSubgraphBlock.number}\r\n          </a>\r\n        </p>\r\n      )}\r\n      {showForm && (\r\n        <div className=\"form\">\r\n          <p>\r\n            <label>Period</label>\r\n            <input\r\n              type=\"date\"\r\n              value={fromValue}\r\n              onChange={(evt) => setFromValue(evt.target.value)}\r\n            />\r\n            &nbsp;â€”&nbsp;\r\n            <input\r\n              type=\"date\"\r\n              value={toValue}\r\n              onChange={(evt) => setToValue(evt.target.value)}\r\n            />\r\n            <button onClick={(evt) => setDateRange(86400 * 29)}>30 days</button>\r\n            <button onClick={(evt) => setDateRange(86400 * 6)}>7 days</button>\r\n          </p>\r\n        </div>\r\n      )}\r\n      <div className=\"chart-grid\">\r\n        <div className=\"chart-cell stats\">\r\n          {totalVolume ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Volume</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalVolume, { currency: true })}\r\n                {totalVolumeDelta && (\r\n                  <span\r\n                    className=\"total-stat-delta plus\"\r\n                    title=\"Change since previous day\"\r\n                  >\r\n                    +\r\n                    {formatNumber(totalVolumeDelta, {\r\n                      currency: true,\r\n                      compact: true,\r\n                    })}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </>\r\n          ) : volumeLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Volume</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalFees ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Fees</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalFees, { currency: true })}\r\n                <span\r\n                  className=\"total-stat-delta plus\"\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  +\r\n                  {formatNumber(totalFeesDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : feesLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Fees</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalAum ? (\r\n            <>\r\n              <div className=\"total-stat-label\">MJLP Pool</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalAum, { currency: true })}\r\n                <span\r\n                  className={cx(\r\n                    \"total-stat-delta\",\r\n                    totalAumDelta > 0 ? \"plus\" : \"minus\"\r\n                  )}\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  {totalAumDelta > 0 ? \"+\" : \"\"}\r\n                  {formatNumber(totalAumDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalUsers ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Users</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalUsers)}\r\n                <span\r\n                  className=\"total-stat-delta plus\"\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  +{formatNumber(totalUsersDelta)}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : usersLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Users</div>\r\n              <div className=\"total-stat-value\">{formatNumber(0)}</div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {openInterest ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Open Interest</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(openInterest, { currency: true })}\r\n                <span\r\n                  className={cx(\r\n                    \"total-stat-delta\",\r\n                    openInterestDelta > 0 ? \"plus\" : \"minus\"\r\n                  )}\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  {openInterestDelta > 0 ? \"+\" : \"\"}\r\n                  {formatNumber(openInterestDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : tradersLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Open Interest</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <VolumeChart\r\n            data={volumeData}\r\n            loading={volumeLoading}\r\n            chartHeight={CHART_HEIGHT}\r\n            yaxisWidth={YAXIS_WIDTH}\r\n            xaxisTickFormatter={tooltipLabelFormatter}\r\n            yaxisTickFormatter={yaxisFormatter}\r\n            tooltipLabelFormatter={tooltipLabelFormatter}\r\n            tooltipFormatter={tooltipFormatter}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <FeesChart\r\n            data={feesData}\r\n            loading={feesLoading}\r\n            chartHeight={CHART_HEIGHT}\r\n            yaxisWidth={YAXIS_WIDTH}\r\n            xaxisTickFormatter={tooltipLabelFormatter}\r\n            yaxisTickFormatter={yaxisFormatter}\r\n            tooltipLabelFormatter={tooltipLabelFormatter}\r\n            tooltipFormatter={tooltipFormatter}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"MJAR & Mjlp Supply\"\r\n            loading={mjlpLoading}\r\n            data={mjlpData}\r\n            csvFields={[{ key: \"aum\" }, { key: \"mjlpSupply\" }]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={mjlpData} syncId=\"syncMjlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"aum\"\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  unit=\"$\"\r\n                  dot={false}\r\n                  dataKey=\"aum\"\r\n                  stackId=\"a\"\r\n                  name=\"MJAR\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  dataKey=\"mjlpSupply\"\r\n                  stackId=\"a\"\r\n                  name=\"MJLP Supply\"\r\n                  stroke={COLORS[1]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </ChartWrapper>\r\n        </div>\r\n\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Mjlp Performance\"\r\n            loading={mjlpLoading}\r\n            data={mjlpPerformanceData}\r\n            csvFields={[\r\n              { key: \"syntheticPrice\" },\r\n              { key: \"mjlpPrice\" },\r\n              { key: \"mjlpPlusFees\" },\r\n              { key: \"lpBtcPrice\" },\r\n              { key: \"lpEthPrice\" },\r\n              { key: \"performanceSyntheticCollectedFees\" },\r\n              { key: \"indexBtcCount\" },\r\n              { key: \"indexEthCount\" },\r\n              { key: \"indexAvaxCount\" },\r\n              { key: \"indexStableCount\" },\r\n              { key: \"BTC_WEIGHT\" },\r\n              { key: \"ETH_WEIGHT\" },\r\n              { key: \"OP_WEIGHT\" },\r\n              { key: \"STABLE_WEIGHT\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={mjlpPerformanceData} syncId=\"syncMjlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  domain={[80, 180]}\r\n                  unit=\"%\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceLpBtcCollectedFees\"\r\n                  name=\"% LP BTC-USDC (w/ fees)\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceLpEthCollectedFees\"\r\n                  name=\"% LP ETH-USDC (w/ fees)\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  name=\"% Index (w/ fees)\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>\r\n                <span style={{ color: COLORS[0] }}>% of Index (with fees)</span>{\" \"}\r\n                is MJLP with fees / Index Price * 100. Index is a basket of 25%\r\n                BTC, 25% ETH, 50% USDC rebalanced once&nbsp;a&nbsp;day\r\n                <br />\r\n                <span style={{ color: COLORS[4] }}>\r\n                  % of LP ETH-USDC (with fees)\r\n                </span>{\" \"}\r\n                is MJLP Price with fees / LP ETH-USDC * 100\r\n                <br />\r\n              </p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Mjlp Price Comparison\"\r\n            loading={mjlpLoading}\r\n            data={mjlpPerformanceData}\r\n            csvFields={[\r\n              { key: \"syntheticPrice\" },\r\n              { key: \"mjlpPrice\" },\r\n              { key: \"mjlpPlusFees\" },\r\n              { key: \"lpBtcPrice\" },\r\n              { key: \"lpEthPrice\" },\r\n              { key: \"performanceSyntheticCollectedFees\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={mjlpPerformanceData} syncId=\"syncMjlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  domain={[60, 210]}\r\n                  unit=\"%\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"mjlpPrice\"\r\n                  domain={[0.4, 1.7]}\r\n                  orientation=\"right\"\r\n                  yAxisId=\"right\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceLpBtcCollectedFees\"\r\n                  name=\"% LP BTC-USDC (w/ fees)\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceLpEthCollectedFees\"\r\n                  name=\"% LP ETH-USDC (w/ fees)\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  name=\"% Index (w/ fees)\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"syntheticPrice\"\r\n                  name=\"Index Price\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"mjlpPrice\"\r\n                  name=\"Mjlp Price\"\r\n                  stroke={COLORS[1]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"mjlpPlusFees\"\r\n                  name=\"Mjlp w/ fees\"\r\n                  stroke={COLORS[3]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"lpBtcPrice\"\r\n                  name=\"LP BTC-USDC\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"lpEthPrice\"\r\n                  name=\"LP ETH-USDC\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>\r\n                <span style={{ color: COLORS[3] }}>Mjlp with fees</span> is\r\n                based on MJLP share of fees received and excluding esMJAR rewards\r\n                <br />\r\n                <span style={{ color: COLORS[0] }}>\r\n                  % of Index (with fees)\r\n                </span>{\" \"}\r\n                is Mjlp with fees / Index Price * 100\r\n                <br />\r\n                <span style={{ color: COLORS[4] }}>\r\n                  % of LP ETH-USDC (with fees)\r\n                </span>{\" \"}\r\n                is Mjlp Price with fees / LP ETH-USDC * 100\r\n                <br />\r\n                <span style={{ color: COLORS[2] }}>Index Price</span> is 25%\r\n                BTC, 25% ETH, 50% USDC\r\n              </p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        {isExperiment && (\r\n          <div className=\"chart-cell experiment\">\r\n            <ChartWrapper title=\"Performance vs. Index\" loading={mjlpLoading}>\r\n              <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n                <LineChart data={mjlpPerformanceData} syncId=\"syncMjlp\">\r\n                  <CartesianGrid strokeDasharray=\"10 10\" />\r\n                  <XAxis\r\n                    dataKey=\"timestamp\"\r\n                    tickFormatter={tooltipLabelFormatter}\r\n                    minTickGap={30}\r\n                  />\r\n                  <YAxis\r\n                    dataKey=\"performanceSyntheticCollectedFees\"\r\n                    domain={[80, 120]}\r\n                    unit=\"%\"\r\n                    tickFormatter={yaxisFormatterNumber}\r\n                    width={YAXIS_WIDTH}\r\n                  />\r\n                  <Tooltip\r\n                    formatter={tooltipFormatterNumber}\r\n                    labelFormatter={tooltipLabelFormatter}\r\n                    contentStyle={{ textAlign: \"left\" }}\r\n                  />\r\n                  <Legend />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticCollectedFees\"\r\n                    name=\"Collected Fees\"\r\n                    stroke={COLORS[0]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticDistributedUsd\"\r\n                    name=\"Distributed Usd\"\r\n                    stroke={COLORS[1]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticDistributedEth\"\r\n                    name=\"Distributed Eth\"\r\n                    stroke={COLORS[2]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSynthetic\"\r\n                    name=\"No Fees\"\r\n                    stroke={COLORS[3]}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </ChartWrapper>\r\n          </div>\r\n        )}\r\n        {isExperiment && (\r\n          <div className=\"chart-cell experiment\">\r\n            <ChartWrapper title=\"Performance vs. ETH LP\" loading={mjlpLoading}>\r\n              <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n                <LineChart data={mjlpPerformanceData} syncId=\"syncMjlp\">\r\n                  <CartesianGrid strokeDasharray=\"10 10\" />\r\n                  <XAxis\r\n                    dataKey=\"timestamp\"\r\n                    tickFormatter={tooltipLabelFormatter}\r\n                    minTickGap={30}\r\n                  />\r\n                  <YAxis\r\n                    dataKey=\"performanceLpEthCollectedFees\"\r\n                    domain={[80, 120]}\r\n                    unit=\"%\"\r\n                    tickFormatter={yaxisFormatterNumber}\r\n                    width={YAXIS_WIDTH}\r\n                  />\r\n                  <Tooltip\r\n                    formatter={tooltipFormatterNumber}\r\n                    labelFormatter={tooltipLabelFormatter}\r\n                    contentStyle={{ textAlign: \"left\" }}\r\n                  />\r\n                  <Legend />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthCollectedFees\"\r\n                    name=\"Collected Fees\"\r\n                    stroke={COLORS[0]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthDistributedUsd\"\r\n                    name=\"Distributed Usd\"\r\n                    stroke={COLORS[1]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthDistributedEth\"\r\n                    name=\"Distributed Eth\"\r\n                    stroke={COLORS[2]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEth\"\r\n                    name=\"No Fees\"\r\n                    stroke={COLORS[3]}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </ChartWrapper>\r\n          </div>\r\n        )}\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Traders Net PnL\"\r\n            loading={tradersLoading}\r\n            data={tradersData?.data}\r\n            csvFields={[\r\n              { key: \"pnl\", name: \"Net PnL\" },\r\n              { key: \"pnlCumulative\", name: \"Cumulative PnL\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer\r\n              width=\"100%\"\r\n              syncId=\"tradersId\"\r\n              height={CHART_HEIGHT}\r\n            >\r\n              <ComposedChart data={tradersData?.data}>\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxAbsOfPnlAndCumulativePnl * 1.05,\r\n                    tradersData?.stats.maxAbsOfPnlAndCumulativePnl * 1.05,\r\n                  ]}\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatter}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill={mode == \"dark\" ? \"#FFFFFF\" : \"#000000\"}\r\n                  dot={false}\r\n                  dataKey=\"pnl\"\r\n                  name=\"Net PnL\"\r\n                >\r\n                  {(tradersData?.data || []).map((item, i) => {\r\n                    return (\r\n                      <Cell\r\n                        key={`cell-${i}`}\r\n                        fill={item.pnl > 0 ? \"#22c761\" : \"#f93333\"}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Bar>\r\n                <Line\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  stroke={COLORS[4]}\r\n                  dataKey=\"pnlCumulative\"\r\n                  name=\"Cumulative PnL\"\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>Considers settled (closed) positions</p>\r\n              <p>Fees are not factored into PnL</p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Traders Profit vs. Loss\"\r\n            loading={tradersLoading}\r\n            data={tradersData?.data}\r\n            csvFields={[\r\n              { key: \"profit\" },\r\n              { key: \"loss\" },\r\n              { key: \"profitCumulative\" },\r\n              { key: \"lossCumulative\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer\r\n              width=\"100%\"\r\n              syncId=\"tradersId\"\r\n              height={CHART_HEIGHT}\r\n            >\r\n              <ComposedChart data={tradersData?.data} barGap={0}>\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxProfitLoss * 1.05,\r\n                    tradersData?.stats.maxProfitLoss * 1.05,\r\n                  ]}\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxCumulativeProfitLoss * 1.1,\r\n                    tradersData?.stats.maxCumulativeProfitLoss * 1.1,\r\n                  ]}\r\n                  orientation=\"right\"\r\n                  yAxisId=\"right\"\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatter}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Area\r\n                  yAxisId=\"right\"\r\n                  type=\"monotone\"\r\n                  stroke={0}\r\n                  fill=\"#22c761\"\r\n                  fillOpacity=\"0.4\"\r\n                  dataKey=\"profitCumulative\"\r\n                  name=\"Cumulative Profit\"\r\n                />\r\n                <Area\r\n                  yAxisId=\"right\"\r\n                  type=\"monotone\"\r\n                  stroke={0}\r\n                  fill=\"#f93333\"\r\n                  fillOpacity=\"0.4\"\r\n                  dataKey=\"lossCumulative\"\r\n                  name=\"Cumulative Loss\"\r\n                />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill=\"#22c761\"\r\n                  dot={false}\r\n                  dataKey=\"profit\"\r\n                  name=\"Profit\"\r\n                />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill=\"#f93333\"\r\n                  dot={false}\r\n                  dataKey=\"loss\"\r\n                  name=\"Loss\"\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>Considers settled (closed) positions</p>\r\n              <p>Fees are not factored into PnL</p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={fundingRateLoading}\r\n            title=\"Borrowing Rate Annualized\"\r\n            data={fundingRateData}\r\n            yaxisDataKey=\"ETH\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[\r\n              { key: \"OP\", color: \"#7C43DA\" },\r\n              { key: \"ETH\", color: \"#6185F5\" },\r\n              { key: \"BTC\", color: \"#F7931A\" },\r\n              { key: \"USDC\", color: \"#2775CA\" },\r\n              { key: \"USDT\", color: \"#67B18A\" },\r\n              { key: \"DAI\", color: \"#FAC044\" },\r\n            ]}\r\n            type=\"Line\"\r\n            yaxisDomain={[0, 90 /* ~87% is a maximum yearly borrow rate */]}\r\n            isCoinChart={true}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={tradersLoading}\r\n            title=\"Open Interest\"\r\n            data={tradersData?.data.map((item) => ({\r\n              all: item.openInterest,\r\n              ...item,\r\n            }))}\r\n            yaxisDataKey=\"openInterest\"\r\n            items={[\r\n              { key: \"shortOpenInterest\", name: \"Short\", color: \"#f93333\" },\r\n              { key: \"longOpenInterest\", name: \"Long\", color: \"#22c761\" },\r\n            ]}\r\n            type=\"Bar\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={aumPerformanceLoading}\r\n            title=\"MJAR Performance Annualized\"\r\n            data={aumPerformanceData}\r\n            yaxisDataKey=\"apr\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[{ key: \"apr\", name: \"APR\", color: COLORS[0] }]}\r\n            description=\"Formula = Daily Fees / MJLP Pool * 365 days * 100\"\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={aumPerformanceLoading}\r\n            title=\"MJAR Daily Usage\"\r\n            data={aumPerformanceData}\r\n            yaxisDataKey=\"usage\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[{ key: \"usage\", name: \"Daily Usage\", color: COLORS[4] }]}\r\n            description=\"Formula = Daily Volume / MJLP Pool * 100\"\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={usersLoading}\r\n            title=\"Unique Users\"\r\n            data={usersData}\r\n            yaxisDataKey=\"uniqueSum\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"uniqueSwapCount\", name: \"Swaps\" },\r\n              { key: \"uniqueMarginCount\", name: \"Margin trading\" },\r\n              { key: \"uniqueMintBurnCount\", name: \"Mint & Burn MJLP\" },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={usersLoading}\r\n            title=\"New Users\"\r\n            data={usersData?.map((item) => ({ ...item, all: item.newCount }))}\r\n            yaxisDataKey=\"newCount\"\r\n            rightYaxisDataKey=\"uniqueCountCumulative\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"newSwapCount\", name: \"Swap\" },\r\n              { key: \"newMarginCount\", name: \"Margin trading\" },\r\n              { key: \"newMintBurnCount\", name: \"Mint & Burn\" },\r\n              {\r\n                key: \"uniqueCountCumulative\",\r\n                name: \"Cumulative\",\r\n                type: \"Line\",\r\n                yAxisId: \"right\",\r\n                strokeWidth: 2,\r\n                color: COLORS[4],\r\n              },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={usersLoading}\r\n            title=\"New vs. Existing Users\"\r\n            data={usersData?.map((item) => ({\r\n              ...item,\r\n              all: item.uniqueCount,\r\n            }))}\r\n            yaxisDataKey=\"uniqueCount\"\r\n            rightYaxisDataKey=\"oldPercent\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"newCount\", name: \"New\" },\r\n              { key: \"oldCount\", name: \"Existing\" },\r\n              {\r\n                key: \"oldPercent\",\r\n                name: \"Existing %\",\r\n                yAxisId: \"right\",\r\n                type: \"Line\",\r\n                strokeWidth: 2,\r\n                color: COLORS[4],\r\n                unit: \"%\",\r\n              },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncMjlp\"\r\n            loading={usersLoading}\r\n            title=\"User Actions\"\r\n            data={(usersData || []).map((item) => ({\r\n              ...item,\r\n              all: item.actionCount,\r\n            }))}\r\n            yaxisDataKey=\"actionCount\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"actionSwapCount\", name: \"Swaps\" },\r\n              { key: \"actionMarginCount\", name: \"Margin trading\" },\r\n              { key: \"actionMintBurnCount\", name: \"Mint & Burn MJLP\" },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={swapSourcesLoading}\r\n            title=\"Swap Sources\"\r\n            data={swapSources}\r\n            items={swapSourcesKeys.map((key) => ({ key }))}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Optimism;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAsBA;AACA;AACA;AACA;AAEA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;A","sourceRoot":""}