{"version":3,"file":"server.975bd578636a488a0dce.hot-update.js","sources":["webpack:///./src/dataProvider.js","webpack:///./src/views/Fantom.js"],"sourcesContent":["import { useMemo, useState, useEffect } from \"react\";\r\nimport { ApolloClient, InMemoryCache, gql, HttpLink } from \"@apollo/client\";\r\nimport { chain, sumBy, sortBy, maxBy, minBy } from \"lodash\";\r\nimport fetch from \"cross-fetch\";\r\nimport * as ethers from \"ethers\";\r\n\r\nimport { getAddress, FANTOM } from \"./addresses\";\r\n\r\nconst { JsonRpcProvider } = ethers.providers;\r\n\r\nimport RewardReader from \"../abis/RewardReader.json\";\r\nimport SlpManager from \"../abis/SlpManager.json\";\r\nimport Token from \"../abis/v1/Token.json\";\r\n\r\nconst providers = {\r\n  fantom: new JsonRpcProvider(\"https://rpc.ftm.tools/\"),\r\n};\r\n\r\nfunction getProvider(chainName) {\r\n  if (!(chainName in providers)) {\r\n    throw new Error(`Unknown chain ${chainName}`);\r\n  }\r\n  return providers[\"fantom\"];\r\n}\r\n\r\nfunction getChainId(chainName) {\r\n  const chainId = {\r\n    fantom: FANTOM,\r\n  }[chainName];\r\n  if (!chainId) {\r\n    throw new Error(`Unknown chain ${chainName}`);\r\n  }\r\n  return chainId;\r\n}\r\n\r\nconst DEFAULT_GROUP_PERIOD = 86400;\r\nconst NOW_TS = parseInt(Date.now() / 1000);\r\nconst FIRST_DATE_TS = parseInt(+new Date(2022, 5, 1) / 1000);\r\n\r\nfunction fillNa(arr, keys) {\r\n  const prevValues = {};\r\n  if (!keys && arr.length > 0) {\r\n    keys = Object.keys(arr[0]);\r\n    delete keys.timestamp;\r\n    delete keys.id;\r\n  }\r\n  for (const el of arr) {\r\n    for (const key of keys) {\r\n      if (!el[key]) {\r\n        if (prevValues[key]) {\r\n          el[key] = prevValues[key];\r\n        }\r\n      } else {\r\n        prevValues[key] = el[key];\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nexport async function queryEarnData(chainName, account) {\r\n  const provider = getProvider(chainName);\r\n  const chainId = getChainId(chainName);\r\n  const rewardReader = new ethers.Contract(\r\n    getAddress(chainId, \"RewardReader\"),\r\n    RewardReader.abi,\r\n    provider\r\n  );\r\n  const slpContract = new ethers.Contract(\r\n    getAddress(chainId, \"SLP\"),\r\n    Token.abi,\r\n    provider\r\n  );\r\n  const slpManager = new ethers.Contract(\r\n    getAddress(chainId, \"SlpManager\"),\r\n    SlpManager.abi,\r\n    provider\r\n  );\r\n\r\n  let depositTokens;\r\n  let rewardTrackersForDepositBalances;\r\n  let rewardTrackersForStakingInfo;\r\n\r\n  if (chainId === FANTOM) {\r\n    depositTokens = [\r\n      getAddress(FANTOM, \"SKULL\"),\r\n      getAddress(FANTOM, \"ES_SKULL\"),\r\n      getAddress(FANTOM, \"STAKED_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"BONUS_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"BN_SKULL\"),\r\n      getAddress(FANTOM, \"SLP\"),\r\n    ];\r\n    rewardTrackersForDepositBalances = [\r\n      getAddress(FANTOM, \"STAKED_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"STAKED_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"BONUS_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"FEE_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"FEE_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"FEE_SLP_TRACKER\"),\r\n    ];\r\n    rewardTrackersForStakingInfo = [\r\n      getAddress(FANTOM, \"STAKED_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"BONUS_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"FEE_SKULL_TRACKER\"),\r\n      getAddress(FANTOM, \"STAKED_SLP_TRACKER\"),\r\n      getAddress(FANTOM, \"FEE_SLP_TRACKER\"),\r\n    ];\r\n  }\r\n\r\n  const [balances, stakingInfo, slpTotalSupply, slpAum, skullPrice] =\r\n    await Promise.all([\r\n      rewardReader.getDepositBalances(\r\n        account,\r\n        depositTokens,\r\n        rewardTrackersForDepositBalances\r\n      ),\r\n      rewardReader\r\n        .getStakingInfo(account, rewardTrackersForStakingInfo)\r\n        .then((info) => {\r\n          return rewardTrackersForStakingInfo.map((_, i) => {\r\n            return info.slice(i * 5, (i + 1) * 5);\r\n          });\r\n        }),\r\n      slpContract.totalSupply(),\r\n      slpManager.getAumInUsdm(true),\r\n      fetch(\r\n        \"https://api.coingecko.com/api/v3/simple/price?ids=metavault-trade&vs_currencies=usd\"\r\n      ).then(async (res) => {\r\n        const j = await res.json();\r\n        return j[\"metavault-trade\"][\"usd\"];\r\n      }),\r\n    ]);\r\n\r\n  const slpPrice = slpAum / 1e18 / (slpTotalSupply / 1e18);\r\n  const now = new Date();\r\n\r\n  return {\r\n    SLP: {\r\n      stakedSLP: balances[5] / 1e18,\r\n      pendingETH: stakingInfo[4][0] / 1e18,\r\n      pendingEsSKULL: stakingInfo[3][0] / 1e18,\r\n      slpPrice,\r\n    },\r\n    SKULL: {\r\n      stakedSKULL: balances[0] / 1e18,\r\n      stakedEsSKULL: balances[1] / 1e18,\r\n      pendingETH: stakingInfo[2][0] / 1e18,\r\n      pendingEsSKULL: stakingInfo[0][0] / 1e18,\r\n      skullPrice,\r\n    },\r\n    timestamp: parseInt(now / 1000),\r\n    datetime: now.toISOString(),\r\n  };\r\n}\r\n\r\nexport const tokenDecimals = {\r\n  \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\": 18, // WFTM\r\n  \"0x74b23882a30290451A17c44f4F05243b6b58C76d\": 18, // WETH\r\n  \"0x321162Cd933E2Be498Cd2267a90534A804051b11\": 8, // BTC\r\n  \"0x04068DA6C83AFCFA0e13ba15A6696662335D5B75\": 6, // USDC\r\n  \"0x049d68029688eAbF473097a2fC38ef61633A3C7A\": 6, // USDT\r\n  \"0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E\": 18, // DAI\r\n};\r\n\r\nexport const tokenSymbols = {\r\n  // Fantom\r\n  \"0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83\": \"WFTM\",\r\n  \"0x74b23882a30290451A17c44f4F05243b6b58C76d\": \"WETH\",\r\n  \"0x321162Cd933E2Be498Cd2267a90534A804051b11\": \"WBTC\",\r\n  \"0x04068DA6C83AFCFA0e13ba15A6696662335D5B75\": \"USDC\",\r\n  \"0x049d68029688eAbF473097a2fC38ef61633A3C7A\": \"USDT\",\r\n  \"0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E\": \"DAI\",\r\n};\r\n\r\nfunction getTokenDecimals(token) {\r\n  return tokenDecimals[token] || 18;\r\n}\r\n\r\nconst knownSwapSources = {\r\n  fantom: {\r\n    [getAddress(FANTOM, \"Router\")]: \"SKULL\",\r\n    [getAddress(FANTOM, \"OrderBook\")]: \"SKULL\",\r\n    [getAddress(FANTOM, \"PositionManager\")]: \"SKULL\",\r\n    // [getAddress(FANTOM, \"OrderExecutor\")]: \"SKULL\",\r\n    [getAddress(FANTOM, \"FastPriceFeed\")]: \"SKULL\",\r\n    [getAddress(FANTOM, \"PositionExecutorUpKeep\")]: \"SKULL\",\r\n    [getAddress(FANTOM, \"PositionRouter\")]: \"SKULL\",\r\n  },\r\n};\r\n\r\nconst defaultFetcher = (url) => fetch(url).then((res) => res.json());\r\nexport function useRequest(url, defaultValue, fetcher = defaultFetcher) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState();\r\n  const [data, setData] = useState(defaultValue);\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await fetcher(url);\r\n      setData(data);\r\n    } catch (ex) {\r\n      console.error(ex);\r\n      setError(ex);\r\n    }\r\n    setLoading(false);\r\n  }, [url]);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nexport function useCoingeckoPrices(symbol, { from = FIRST_DATE_TS } = {}) {\r\n  // token ids https://api.coingecko.com/api/v3/coins\r\n  const _symbol = {\r\n    BTC: \"bitcoin\",\r\n    ETH: \"ethereum\",\r\n    FTM: \"fantom\",\r\n    MATIC: \"matic-network\",\r\n    WBTC: \"wrapped-bitcoin\",\r\n    USDC: \"usd-coin\",\r\n    USDT: \"tether\",\r\n    DAI: \"dai\",\r\n  }[symbol];\r\n\r\n  const now = Date.now() / 1000;\r\n  const days = Math.ceil(now / 86400) - Math.ceil(from / 86400) - 1;\r\n\r\n  const url = `https://api.coingecko.com/api/v3/coins/${_symbol}/market_chart?vs_currency=usd&days=${days}&interval=daily`;\r\n\r\n  const [res, loading, error] = useRequest(url);\r\n\r\n  const data = useMemo(() => {\r\n    if (!res || res.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const ret = res.prices.map((item) => {\r\n      // -1 is for shifting to previous day\r\n      // because CG uses first price of the day, but for SLP we store last price of the day\r\n      const timestamp = item[0] - 1;\r\n      const groupTs = parseInt(timestamp / 1000 / 86400) * 86400;\r\n      return {\r\n        timestamp: groupTs,\r\n        value: item[1],\r\n      };\r\n    });\r\n    return ret;\r\n  }, [res]);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nfunction getImpermanentLoss(change) {\r\n  return (2 * Math.sqrt(change)) / (1 + change) - 1;\r\n}\r\n\r\nfunction getChainSubgraph(chainName) {\r\n  // return \"chimpydev/stats\";\r\n  return \"chimpydev/core\";\r\n}\r\n\r\nexport function useGraph(\r\n  querySource,\r\n  { subgraph = null, subgraphUrl = null, chainName = \"fantom\" } = {}\r\n) {\r\n  const query = gql(querySource);\r\n\r\n  if (!subgraphUrl) {\r\n    if (!subgraph) {\r\n      subgraph = getChainSubgraph(chainName);\r\n    }\r\n    subgraphUrl = `https://api.thegraph.com/subgraphs/name/${subgraph}`;\r\n  }\r\n\r\n  const client = new ApolloClient({\r\n    link: new HttpLink({ uri: subgraphUrl, fetch }),\r\n    cache: new InMemoryCache(),\r\n  });\r\n  const [data, setData] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n  }, [querySource, setLoading]);\r\n\r\n  useEffect(() => {\r\n    client\r\n      .query({ query })\r\n      .then((res) => {\r\n        setData(res.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((ex) => {\r\n        console.warn(\r\n          \"Subgraph request failed error: %s subgraphUrl: %s\",\r\n          ex.message,\r\n          subgraphUrl\r\n        );\r\n        setError(ex);\r\n        setLoading(false);\r\n      });\r\n  }, [querySource, setData, setError, setLoading]);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nexport function useLastBlock(chainName = \"fantom\") {\r\n  const [data, setData] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  useEffect(() => {\r\n    providers[chainName]\r\n      .getBlock()\r\n      .then(setData)\r\n      .catch(setError)\r\n      .finally(() => setLoading(false));\r\n  }, []);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nexport function useLastSubgraphBlock(chainName = \"fantom\") {\r\n  const [data, loading, error] = useGraph(\r\n    `{\r\n    _meta {\r\n      block {\r\n        number\r\n      }\r\n    } \r\n  }`,\r\n    {\r\n      chainName,\r\n    }\r\n  );\r\n  const [block, setBlock] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!data) {\r\n      return;\r\n    }\r\n\r\n    providers[chainName].getBlock(data._meta.block.number).then((block) => {\r\n      setBlock(block);\r\n    });\r\n  }, [data, setBlock]);\r\n\r\n  return [block, loading, error];\r\n}\r\n\r\nexport function useTradersData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const [closedPositionsData, loading, error] = useGraph(\r\n    `{\r\n    tradingStats(\r\n      first: 1000\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: { period: \"daily\", timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      timestamp\r\n      profit\r\n      loss\r\n      profitCumulative\r\n      lossCumulative\r\n      longOpenInterest\r\n      shortOpenInterest\r\n    }\r\n  }`,\r\n    { chainName }\r\n  );\r\n  const [feesData] = useFeesData({ from, to, chainName });\r\n  const marginFeesByTs = useMemo(() => {\r\n    if (\r\n      !feesData ||\r\n      !closedPositionsData ||\r\n      (closedPositionsData && !closedPositionsData.tradingStats.length)\r\n    ) {\r\n      return {};\r\n    }\r\n\r\n    let feesCumulative = 0;\r\n    return feesData.reduce((memo, { timestamp, margin: fees }) => {\r\n      feesCumulative += fees;\r\n      memo[timestamp] = {\r\n        fees,\r\n        feesCumulative,\r\n      };\r\n      return memo;\r\n    }, {});\r\n  }, [feesData]);\r\n\r\n  let ret = null;\r\n  const data =\r\n    closedPositionsData && closedPositionsData.tradingStats.length > 0\r\n      ? sortBy(closedPositionsData.tradingStats, (i) => i.timestamp).map(\r\n          (dataItem) => {\r\n            const longOpenInterest = dataItem.longOpenInterest / 1e30;\r\n            const shortOpenInterest = dataItem.shortOpenInterest / 1e30;\r\n            const openInterest = longOpenInterest + shortOpenInterest;\r\n\r\n            const fees = marginFeesByTs[dataItem.timestamp]?.fees || 0;\r\n            const feesCumulative =\r\n              marginFeesByTs[dataItem.timestamp]?.feesCumulative || 0;\r\n\r\n            const profit = dataItem.profit / 1e30;\r\n            const loss = dataItem.loss / 1e30;\r\n            const profitCumulative = dataItem.profitCumulative / 1e30;\r\n            const lossCumulative = dataItem.lossCumulative / 1e30;\r\n            const pnlCumulative = profitCumulative - lossCumulative;\r\n            const pnl = profit - loss;\r\n            return {\r\n              longOpenInterest,\r\n              shortOpenInterest,\r\n              openInterest,\r\n              profit,\r\n              loss: -loss,\r\n              profitCumulative,\r\n              lossCumulative: -lossCumulative,\r\n              pnl,\r\n              pnlCumulative,\r\n              timestamp: dataItem.timestamp,\r\n            };\r\n          }\r\n        )\r\n      : null;\r\n\r\n  if (data) {\r\n    const maxProfit = maxBy(data, (item) => item.profit).profit;\r\n    const maxLoss = minBy(data, (item) => item.loss).loss;\r\n    const maxProfitLoss = Math.max(maxProfit, -maxLoss);\r\n\r\n    const maxPnl = maxBy(data, (item) => item.pnl).pnl;\r\n    const minPnl = minBy(data, (item) => item.pnl).pnl;\r\n    const maxCumulativePnl = maxBy(\r\n      data,\r\n      (item) => item.pnlCumulative\r\n    ).pnlCumulative;\r\n    const minCumulativePnl = minBy(\r\n      data,\r\n      (item) => item.pnlCumulative\r\n    ).pnlCumulative;\r\n\r\n    const profitCumulative = data[data.length - 1].profitCumulative;\r\n    const lossCumulative = data[data.length - 1].lossCumulative;\r\n    const stats = {\r\n      maxProfit,\r\n      maxLoss,\r\n      maxProfitLoss,\r\n      profitCumulative,\r\n      lossCumulative,\r\n      maxCumulativeProfitLoss: Math.max(profitCumulative, -lossCumulative),\r\n\r\n      maxAbsOfPnlAndCumulativePnl: Math.max(\r\n        Math.abs(maxPnl),\r\n        Math.abs(maxCumulativePnl),\r\n        Math.abs(minPnl),\r\n        Math.abs(minCumulativePnl)\r\n      ),\r\n    };\r\n\r\n    ret = {\r\n      data,\r\n      stats,\r\n    };\r\n  }\r\n\r\n  return [ret, loading];\r\n}\r\n\r\nfunction getSwapSourcesFragment(skip = 0, from, to) {\r\n  return `\r\n    hourlyVolumeBySources(\r\n      first: 1000\r\n      skip: ${skip}\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: { timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      timestamp\r\n      source\r\n      swap\r\n    }\r\n  `;\r\n}\r\nexport function useSwapSources({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const query = `{\r\n    a: ${getSwapSourcesFragment(0, from, to)}\r\n    b: ${getSwapSourcesFragment(1000, from, to)}\r\n    c: ${getSwapSourcesFragment(2000, from, to)}\r\n    d: ${getSwapSourcesFragment(3000, from, to)}\r\n    e: ${getSwapSourcesFragment(4000, from, to)}\r\n  }`;\r\n  const [graphData, loading, error] = useGraph(query, { chainName });\r\n\r\n  let total = 0;\r\n  let data = useMemo(() => {\r\n    if (!graphData) {\r\n      return null;\r\n    }\r\n\r\n    const { a, b, c, d, e } = graphData;\r\n    const all = [...a, ...b, ...c, ...d, ...e];\r\n\r\n    const totalVolumeBySource = a.reduce((acc, item) => {\r\n      const source = knownSwapSources[chainName][item.source] || item.source;\r\n      if (!acc[source]) {\r\n        acc[source] = 0;\r\n      }\r\n      acc[source] += item.swap / 1e30;\r\n      return acc;\r\n    }, {});\r\n    const topVolumeSources = new Set(\r\n      Object.entries(totalVolumeBySource)\r\n        .sort((a, b) => b[1] - a[1])\r\n        .map((item) => item[0])\r\n        .slice(0, 30)\r\n    );\r\n\r\n    let ret = chain(all)\r\n      .groupBy((item) => parseInt(item.timestamp / 86400) * 86400)\r\n      .map((values, timestamp) => {\r\n        let all = 0;\r\n        const retItem = {\r\n          timestamp: Number(timestamp),\r\n          ...values.reduce((memo, item) => {\r\n            let source =\r\n              knownSwapSources[chainName][item.source] || item.source;\r\n            if (!topVolumeSources.has(source)) {\r\n              source = \"Other\";\r\n            }\r\n            if (item.swap != 0) {\r\n              const volume = item.swap / 1e30;\r\n              memo[source] = memo[source] || 0;\r\n              memo[source] += volume;\r\n              all += volume;\r\n            }\r\n            return memo;\r\n          }, {}),\r\n        };\r\n\r\n        retItem.all = all;\r\n\r\n        return retItem;\r\n      })\r\n      .sortBy((item) => item.timestamp)\r\n      .value();\r\n\r\n    return ret;\r\n  }, [graphData]);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nfunction getServerHostname(chainName) {\r\n  return process.env.RAZZLE_SKULL_API_URL;\r\n}\r\n\r\nexport function useTotalVolumeFromServer() {\r\n  const [data, loading] = useRequest(getServerHostname() + \"/total_volume\");\r\n\r\n  return useMemo(() => {\r\n    if (!data) {\r\n      return [data, loading];\r\n    }\r\n\r\n    const total = data.reduce((memo, item) => {\r\n      return memo + parseInt(item.data.volume) / 1e30;\r\n    }, 0);\r\n    return [total, loading];\r\n  }, [data, loading]);\r\n}\r\n\r\nexport async function getStatsFromSubgraph(graphClient, chainName=\"fantom\"){\r\n  const queryString = `{\r\n    totalVolumes: volumeStats(where: {period: \"total\"}) {\r\n      swap\r\n      mint\r\n      burn\r\n      margin\r\n      liquidation\r\n    }\r\n    deltaVolumes: volumeStats(\r\n      first:1\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: {period: \"daily\"}\r\n    ) {\r\n      swap\r\n      mint\r\n      burn\r\n      margin\r\n      liquidation\r\n    }\r\n  \ttotalFees: feeStats(where: {period: \"total\"}) {\r\n      swap\r\n      mint\r\n      burn\r\n      margin\r\n      liquidation\r\n\t\t}\r\n    deltaFees: feeStats(\r\n      first:1\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: {period: \"daily\"}\r\n    ) {\r\n      swap\r\n      mint\r\n      burn\r\n      margin\r\n      liquidation\r\n    }\r\n  }`;\r\n\r\n  const query = gql(queryString);\r\n  const { data } = await graphClient.query({query})\r\n  const statsProps = [\"totalVolumes\", \"deltaVolumes\", \"totalFees\", \"deltaFees\"]\r\n  const methodProps = [\"swap\", \"mint\", \"burn\", \"margin\", \"liquidation\"]\r\n  const result = {}\r\n  console.log(data);\r\n  statsProps.forEach((statsProp)=>{\r\n    result[statsProp] = {}\r\n    let total = 0;\r\n    methodProps.forEach((methodProp)=>{\r\n      const statValue = parseInt(data[statsProp][0][methodProp]) / 1e30;\r\n      console.log(statValue);\r\n      result[statsProp][methodProp] = statValue\r\n      total += statValue\r\n    })\r\n    result[statsProp].total = total;\r\n  })\r\n  console.log(result);\r\n  return result;\r\n}\r\n\r\nexport function useVolumeDataFromServer({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const PROPS = \"margin liquidation swap mint burn\".split(\" \");\r\n  const [data, loading] = useRequest(\r\n    `${getServerHostname(chainName)}/daily_volume`,\r\n    null,\r\n    async (url) => {\r\n      let after;\r\n      const ret = [];\r\n      while (true) {\r\n        const res = await (\r\n          await fetch(url + (after ? `?after=${after}` : \"\"))\r\n        ).json();\r\n        if (res.length === 0) return ret;\r\n        for (const item of res) {\r\n          if (item.data.timestamp < from) {\r\n            return ret;\r\n          }\r\n          ret.push(item);\r\n        }\r\n        after = res[res.length - 1].id;\r\n      }\r\n    }\r\n  );\r\n\r\n  const ret = useMemo(() => {\r\n    if (!data) {\r\n      return null;\r\n    }\r\n\r\n    const tmp = data.reduce((memo, item) => {\r\n      const timestamp = item.data.timestamp;\r\n      if (timestamp < from || timestamp > to) {\r\n        return memo;\r\n      }\r\n\r\n      let type;\r\n      if (item.data.action === \"Swap\") {\r\n        type = \"swap\";\r\n      } else if (item.data.action === \"SellUSDM\") {\r\n        type = \"burn\";\r\n      } else if (item.data.action === \"BuyUSDM\") {\r\n        type = \"mint\";\r\n      } else if (item.data.action.includes(\"LiquidatePosition\")) {\r\n        type = \"liquidation\";\r\n      } else {\r\n        type = \"margin\";\r\n      }\r\n      const volume = Number(item.data.volume) / 1e30;\r\n      memo[timestamp] = memo[timestamp] || {};\r\n      memo[timestamp][type] = memo[timestamp][type] || 0;\r\n      memo[timestamp][type] += volume;\r\n      return memo;\r\n    }, {});\r\n\r\n    let cumulative = 0;\r\n    const cumulativeByTs = {};\r\n    return Object.keys(tmp)\r\n      .sort()\r\n      .map((timestamp) => {\r\n        const item = tmp[timestamp];\r\n        let all = 0;\r\n\r\n        let movingAverageAll;\r\n        const movingAverageTs = timestamp - MOVING_AVERAGE_PERIOD;\r\n        if (movingAverageTs in cumulativeByTs) {\r\n          movingAverageAll =\r\n            (cumulative - cumulativeByTs[movingAverageTs]) /\r\n            MOVING_AVERAGE_DAYS;\r\n        }\r\n\r\n        PROPS.forEach((prop) => {\r\n          if (item[prop]) all += item[prop];\r\n        });\r\n        cumulative += all;\r\n        cumulativeByTs[timestamp] = cumulative;\r\n        return {\r\n          timestamp,\r\n          all,\r\n          cumulative,\r\n          movingAverageAll,\r\n          ...item,\r\n        };\r\n      });\r\n  }, [data, from, to]);\r\n\r\n  return [ret, loading];\r\n}\r\n\r\nexport function useUsersData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const query = `{\r\n    userStats(\r\n      first: 1000\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: { period: \"daily\", timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      uniqueCount\r\n      uniqueSwapCount\r\n      uniqueMarginCount\r\n      uniqueMintBurnCount\r\n      uniqueCountCumulative\r\n      uniqueSwapCountCumulative\r\n      uniqueMarginCountCumulative\r\n      uniqueMintBurnCountCumulative\r\n      actionCount\r\n      actionSwapCount\r\n      actionMarginCount\r\n      actionMintBurnCount\r\n      timestamp\r\n    }\r\n  }`;\r\n  const [graphData, loading, error] = useGraph(query, { chainName });\r\n\r\n  const prevUniqueCountCumulative = {};\r\n  const data = graphData\r\n    ? sortBy(graphData.userStats, \"timestamp\").map((item) => {\r\n        const newCountData = [\"\", \"Swap\", \"Margin\", \"MintBurn\"].reduce(\r\n          (memo, type) => {\r\n            memo[`new${type}Count`] = prevUniqueCountCumulative[type]\r\n              ? item[`unique${type}CountCumulative`] -\r\n                prevUniqueCountCumulative[type]\r\n              : item[`unique${type}Count`];\r\n            prevUniqueCountCumulative[type] =\r\n              item[`unique${type}CountCumulative`];\r\n            return memo;\r\n          },\r\n          {}\r\n        );\r\n        const oldCount = item.uniqueCount - newCountData.newCount;\r\n        const oldPercent = ((oldCount / item.uniqueCount) * 100).toFixed(1);\r\n        return {\r\n          all: item.uniqueCount,\r\n          uniqueSum:\r\n            item.uniqueSwapCount +\r\n            item.uniqueMarginCount +\r\n            item.uniqueMintBurnCount,\r\n          oldCount,\r\n          oldPercent,\r\n          ...newCountData,\r\n          ...item,\r\n        };\r\n      })\r\n    : null;\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nexport function useFundingRateData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const query = `{\r\n    fundingRates(\r\n      first: 1000,\r\n      orderBy: timestamp,\r\n      orderDirection: desc,\r\n      where: { period: \"daily\", id_gte: ${from}, id_lte: ${to} }\r\n    ) {\r\n      id,\r\n      token,\r\n      timestamp,\r\n      startFundingRate,\r\n      startTimestamp,\r\n      endFundingRate,\r\n      endTimestamp\r\n    }\r\n  }`;\r\n  const [graphData, loading, error] = useGraph(query, { chainName });\r\n\r\n  const data = useMemo(() => {\r\n    if (!graphData) {\r\n      return null;\r\n    }\r\n\r\n    const groups = graphData.fundingRates.reduce((memo, item) => {\r\n      const symbol = tokenSymbols[item.token];\r\n      memo[item.timestamp] = memo[item.timestamp] || {\r\n        timestamp: item.timestamp,\r\n      };\r\n      const group = memo[item.timestamp];\r\n      const timeDelta =\r\n        parseInt((item.endTimestamp - item.startTimestamp) / 3600) * 3600;\r\n\r\n      let fundingRate = 0;\r\n      if (item.endFundingRate && item.startFundingRate) {\r\n        const fundingDelta = item.endFundingRate - item.startFundingRate;\r\n        const divisor = timeDelta / 86400;\r\n        fundingRate = (fundingDelta / divisor / 10000) * 365;\r\n      }\r\n      group[symbol] = fundingRate;\r\n      return memo;\r\n    }, {});\r\n\r\n    return fillNa(sortBy(Object.values(groups), \"timestamp\"), [\r\n      \"FTM\",\r\n      \"ETH\",\r\n      \"USDC\",\r\n      \"USDT\",\r\n      \"BTC\",\r\n      \"DAI\",\r\n    ]);\r\n  }, [graphData]);\r\n\r\n  return [data, loading, error];\r\n}\r\n\r\nconst MOVING_AVERAGE_DAYS = 7;\r\nconst MOVING_AVERAGE_PERIOD = 86400 * MOVING_AVERAGE_DAYS;\r\n\r\nexport function useVolumeData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const PROPS = \"margin liquidation swap mint burn\".split(\" \");\r\n  const timestampProp = \"timestamp\";\r\n  const query = `{\r\n    volumeStats(\r\n      first: 1000,\r\n      orderBy: timestamp,\r\n      orderDirection: desc\r\n      where: { period: daily, timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      timestamp\r\n      ${PROPS.join(\"\\n\")}\r\n    }\r\n  }`;\r\n  const [graphData, loading, error] = useGraph(query, { chainName });\r\n\r\n  const data = useMemo(() => {\r\n    if (!graphData) {\r\n      return null;\r\n    }\r\n\r\n    let ret = sortBy(graphData.volumeStats, timestampProp).map((item) => {\r\n      const ret = { timestamp: item[timestampProp] };\r\n      let all = 0;\r\n      PROPS.forEach((prop) => {\r\n        ret[prop] = item[prop] / 1e30;\r\n        all += ret[prop];\r\n      });\r\n      ret.all = all;\r\n      return ret;\r\n    });\r\n\r\n    let cumulative = 0;\r\n    const cumulativeByTs = {};\r\n    return ret.map((item) => {\r\n      cumulative += item.all;\r\n\r\n      let movingAverageAll;\r\n      const movingAverageTs = item.timestamp - MOVING_AVERAGE_PERIOD;\r\n      if (movingAverageTs in cumulativeByTs) {\r\n        movingAverageAll =\r\n          (cumulative - cumulativeByTs[movingAverageTs]) / MOVING_AVERAGE_DAYS;\r\n      }\r\n\r\n      return {\r\n        movingAverageAll,\r\n        cumulative,\r\n        ...item,\r\n      };\r\n    });\r\n  }, [graphData]);\r\n\r\n  let total;\r\n\r\n  if(data&&data.length)\r\n    total = data[data.length-1].cumulative;\r\n\r\n\r\n\r\n  return [data,total, loading, error];\r\n}\r\n\r\nexport function useFeesData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const PROPS = \"margin liquidation swap mint burn\".split(\" \");\r\n  const feesQuery = `{\r\n    feeStats(\r\n      first: 1000\r\n      orderBy: id\r\n      orderDirection: desc\r\n      where: { period: daily, timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      id\r\n      margin\r\n      marginAndLiquidation\r\n      swap\r\n      mint\r\n      burn\r\n      timestamp\r\n    }\r\n  }`;\r\n\r\n  let [feesData, loading, error] = useGraph(feesQuery, { chainName });\r\n\r\n  const feesChartData = useMemo(() => {\r\n    if (!feesData || (feesData && feesData.feeStats.length === 0)) {\r\n      return null;\r\n    }\r\n\r\n    let chartData = sortBy(feesData.feeStats, \"id\").map((item) => {\r\n      const ret = { timestamp: item.timestamp || item.id };\r\n\r\n      PROPS.forEach((prop) => {\r\n        if (item[prop]) {\r\n          ret[prop] = item[prop] / 1e30;\r\n        }\r\n      });\r\n\r\n      ret.liquidation = item.marginAndLiquidation / 1e30 - item.margin / 1e30;\r\n      ret.all = PROPS.reduce((memo, prop) => memo + ret[prop], 0);\r\n      return ret;\r\n    });\r\n\r\n    let cumulative = 0;\r\n    const cumulativeByTs = {};\r\n    return chain(chartData)\r\n      .groupBy((item) => item.timestamp)\r\n      .map((values, timestamp) => {\r\n        const all = sumBy(values, \"all\");\r\n        cumulative += all;\r\n\r\n        let movingAverageAll;\r\n        const movingAverageTs = timestamp - MOVING_AVERAGE_PERIOD;\r\n        if (movingAverageTs in cumulativeByTs) {\r\n          movingAverageAll =\r\n            (cumulative - cumulativeByTs[movingAverageTs]) /\r\n            MOVING_AVERAGE_DAYS;\r\n        }\r\n\r\n        const ret = {\r\n          timestamp: Number(timestamp),\r\n          all,\r\n          cumulative,\r\n          movingAverageAll,\r\n        };\r\n        PROPS.forEach((prop) => {\r\n          ret[prop] = sumBy(values, prop);\r\n        });\r\n        cumulativeByTs[timestamp] = cumulative;\r\n        return ret;\r\n      })\r\n      .value()\r\n      .filter((item) => item.timestamp >= from);\r\n  }, [feesData]);\r\n\r\n  return [feesChartData, loading, error];\r\n}\r\n\r\nexport function useAumPerformanceData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  groupPeriod,\r\n}) {\r\n  const [feesData, feesLoading] = useFeesData({ from, to, groupPeriod });\r\n  const [slpData, slpLoading] = useSlpData({ from, to, groupPeriod });\r\n  const [volumeData, volumeLoading] = useVolumeData({ from, to, groupPeriod });\r\n\r\n  const dailyCoef = 86400 / groupPeriod;\r\n\r\n  const data = useMemo(() => {\r\n    if (!feesData || !slpData || !volumeData) {\r\n      return null;\r\n    }\r\n\r\n    const ret = feesData.map((feeItem, i) => {\r\n      const slpItem = slpData[i];\r\n      const volumeItem = volumeData[i];\r\n      let apr =\r\n        feeItem?.all && slpItem?.aum\r\n          ? (feeItem.all / slpItem.aum) * 100 * 365 * dailyCoef\r\n          : null;\r\n      if (apr > 10000) {\r\n        apr = null;\r\n      }\r\n      let usage =\r\n        volumeItem?.all && slpItem?.aum\r\n          ? (volumeItem.all / slpItem.aum) * 100 * dailyCoef\r\n          : null;\r\n      if (usage > 10000) {\r\n        usage = null;\r\n      }\r\n\r\n      return {\r\n        timestamp: feeItem.timestamp,\r\n        apr,\r\n        usage,\r\n      };\r\n    });\r\n    const averageApr =\r\n      ret.reduce((memo, item) => item.apr + memo, 0) / ret.length;\r\n    ret.forEach((item) => (item.averageApr = averageApr));\r\n    const averageUsage =\r\n      ret.reduce((memo, item) => item.usage + memo, 0) / ret.length;\r\n    ret.forEach((item) => (item.averageUsage = averageUsage));\r\n    return ret;\r\n  }, [feesData, slpData, volumeData]);\r\n\r\n  return [data, feesLoading || slpLoading || volumeLoading];\r\n}\r\n\r\nexport function useSlpData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const query = `{\r\n    slpStats(\r\n      first: 1000\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: {period: daily, timestamp_gte: ${from}, timestamp_lte: ${to}}\r\n    ) {\r\n      timestamp\r\n      aumInUsdm\r\n      slpSupply\r\n      distributedUsd\r\n      distributedEth\r\n    }\r\n  }`;\r\n  let [data, loading, error] = useGraph(query, { chainName });\r\n\r\n  let cumulativeDistributedUsdPerSlp = 0;\r\n  let cumulativeDistributedEthPerSlp = 0;\r\n  const slpChartData = useMemo(() => {\r\n    if (!data || (data && data.slpStats.length === 0)) {\r\n      return null;\r\n    }\r\n\r\n    const getTimestamp = (item) => item.timestamp;\r\n\r\n    let prevSlpSupply;\r\n    let prevAum;\r\n\r\n    let ret = sortBy(data.slpStats, (item) => item.timestamp)\r\n      .filter((item) => item.timestamp % 86400 === 0)\r\n      .reduce((memo, item) => {\r\n        const last = memo[memo.length - 1];\r\n\r\n        const aum = Number(item.aumInUsdm) / 1e18;\r\n        const slpSupply = Number(item.slpSupply) / 1e18;\r\n\r\n        const distributedUsd = Number(item.distributedUsd) / 1e30;\r\n        const distributedUsdPerSlp = distributedUsd / slpSupply || 0;\r\n        cumulativeDistributedUsdPerSlp += distributedUsdPerSlp;\r\n\r\n        const distributedEth = Number(item.distributedEth) / 1e18;\r\n        const distributedEthPerSlp = distributedEth / slpSupply || 0;\r\n        cumulativeDistributedEthPerSlp += distributedEthPerSlp;\r\n\r\n        const slpPrice = aum / slpSupply;\r\n        const timestamp = parseInt(item.timestamp);\r\n\r\n        const newItem = {\r\n          timestamp,\r\n          aum,\r\n          slpSupply,\r\n          slpPrice,\r\n          cumulativeDistributedEthPerSlp,\r\n          cumulativeDistributedUsdPerSlp,\r\n          distributedUsdPerSlp,\r\n          distributedEthPerSlp,\r\n        };\r\n\r\n        if (last && last.timestamp === timestamp) {\r\n          memo[memo.length - 1] = newItem;\r\n        } else {\r\n          memo.push(newItem);\r\n        }\r\n\r\n        return memo;\r\n      }, [])\r\n      .map((item) => {\r\n        let { slpSupply, aum } = item;\r\n        if (!slpSupply) {\r\n          slpSupply = prevSlpSupply;\r\n        }\r\n        if (!aum) {\r\n          aum = prevAum;\r\n        }\r\n        item.slpSupplyChange = prevSlpSupply\r\n          ? ((slpSupply - prevSlpSupply) / prevSlpSupply) * 100\r\n          : 0;\r\n        if (item.slpSupplyChange > 1000) item.slpSupplyChange = 0;\r\n        item.aumChange = prevAum ? ((aum - prevAum) / prevAum) * 100 : 0;\r\n        if (item.aumChange > 1000) item.aumChange = 0;\r\n        prevSlpSupply = slpSupply;\r\n        prevAum = aum;\r\n        return item;\r\n      });\r\n\r\n    ret = fillNa(ret);\r\n    return ret;\r\n  }, [data]);\r\n\r\n  return [slpChartData, loading, error];\r\n}\r\n\r\nexport function useSlpPerformanceData(\r\n  slpData,\r\n  feesData,\r\n  { from = FIRST_DATE_TS, chainName = \"fantom\" } = {}\r\n) {\r\n  const [btcPrices] = useCoingeckoPrices(\"BTC\", { from });\r\n  const [ethPrices] = useCoingeckoPrices(\"ETH\", { from });\r\n  const [maticPrices] = useCoingeckoPrices(\"FTM\", { from });\r\n\r\n  const slpPerformanceChartData = useMemo(() => {\r\n    if (!btcPrices || !ethPrices || !slpData || !feesData) {\r\n      return null;\r\n    }\r\n\r\n    const slpDataById = slpData.reduce((memo, item) => {\r\n      memo[item.timestamp] = item;\r\n      return memo;\r\n    }, {});\r\n\r\n    const feesDataById = feesData.reduce((memo, item) => {\r\n      memo[item.timestamp] = item;\r\n      return memo;\r\n    });\r\n\r\n    let BTC_WEIGHT = 0.15;\r\n    let ETH_WEIGHT = 0.2;\r\n    let FTM_WEIGHT = 0.1;\r\n\r\n\r\n    let prevEthPrice = 1200;\r\n    let prevMaticPrice = 0.4;\r\n\r\n    const STABLE_WEIGHT = 0.5;\r\n    const SLP_START_PRICE =\r\n      slpDataById[btcPrices[0].timestamp]?.slpPrice || 1.19;\r\n\r\n    const btcFirstPrice = btcPrices[0]?.value;\r\n    const ethFirstPrice = ethPrices[0]?.value;\r\n    const maticFirstPrice = ( maticPrices && maticPrices[0] && maticPrices[0].value ) || prevMaticPrice;\r\n\r\n    const indexBtcCount = (SLP_START_PRICE * BTC_WEIGHT) / btcFirstPrice;\r\n    const indexEthCount = (SLP_START_PRICE * ETH_WEIGHT) / ethFirstPrice;\r\n    const indexMaticCount = (SLP_START_PRICE * FTM_WEIGHT) / maticFirstPrice;\r\n\r\n    const lpBtcCount = (SLP_START_PRICE * 0.5) / btcFirstPrice;\r\n    const lpEthCount = (SLP_START_PRICE * 0.5) / ethFirstPrice;\r\n    const lpMaticCount = (SLP_START_PRICE * 0.5) / maticFirstPrice;\r\n\r\n    const ret = [];\r\n    let cumulativeFeesPerSlp = 0;\r\n    let cumulativeEsskullRewardsPerSlp = 0;\r\n    let lastSlpPrice = 0;\r\n\r\n    for (let i = 0; i < btcPrices.length; i++) {\r\n      const btcPrice = btcPrices[i].value;\r\n      const ethPrice = ethPrices[i]?.value || prevEthPrice;\r\n      const maticPrice = ( maticPrices && maticPrices[i] && maticPrices[i].value ) || prevMaticPrice;\r\n      prevMaticPrice = maticPrice;\r\n      prevEthPrice = ethPrice;\r\n\r\n      const timestampGroup = parseInt(btcPrices[i].timestamp / 86400) * 86400;\r\n      const slpItem = slpDataById[timestampGroup];\r\n      const slpPrice = slpItem?.slpPrice ?? lastSlpPrice;\r\n      lastSlpPrice = slpPrice;\r\n      const slpSupply = slpDataById[timestampGroup]?.slpSupply;\r\n      const dailyFees = feesDataById[timestampGroup]?.all;\r\n\r\n      const syntheticPrice =\r\n        indexBtcCount * btcPrice +\r\n        indexEthCount * ethPrice +\r\n        indexMaticCount * maticPrice +\r\n        SLP_START_PRICE * STABLE_WEIGHT;\r\n\r\n      const lpBtcPrice =\r\n        (lpBtcCount * btcPrice + SLP_START_PRICE / 2) *\r\n        (1 + getImpermanentLoss(btcPrice / btcFirstPrice));\r\n      const lpEthPrice =\r\n        (lpEthCount * ethPrice + SLP_START_PRICE / 2) *\r\n        (1 + getImpermanentLoss(ethPrice / ethFirstPrice));\r\n      const lpMaticPrice =\r\n        (lpMaticCount * maticPrice + SLP_START_PRICE / 2) *\r\n        (1 + getImpermanentLoss(maticPrice / maticFirstPrice));\r\n\r\n      if (dailyFees && slpSupply) {\r\n        const INCREASED_SLP_REWARDS_TIMESTAMP = 1635714000;\r\n        const SLP_REWARDS_SHARE =\r\n          timestampGroup >= INCREASED_SLP_REWARDS_TIMESTAMP ? 0.7 : 0.5;\r\n        const collectedFeesPerSlp =\r\n          (dailyFees / slpSupply) * SLP_REWARDS_SHARE;\r\n        cumulativeFeesPerSlp += collectedFeesPerSlp;\r\n\r\n        cumulativeEsskullRewardsPerSlp += (slpPrice * 0.8) / 365;\r\n      }\r\n\r\n      let slpPlusFees = slpPrice;\r\n      if (slpPrice && slpSupply && cumulativeFeesPerSlp) {\r\n        slpPlusFees = slpPrice + cumulativeFeesPerSlp;\r\n      }\r\n\r\n      let slpApr;\r\n      let slpPlusDistributedUsd;\r\n      let slpPlusDistributedEth;\r\n      if (slpItem) {\r\n        if (slpItem.cumulativeDistributedUsdPerSlp) {\r\n          slpPlusDistributedUsd =\r\n            slpPrice + slpItem.cumulativeDistributedUsdPerSlp;\r\n          // slpApr = slpItem.distributedUsdPerSlp / slpPrice * 365 * 100 // incorrect?\r\n        }\r\n        if (slpItem.cumulativeDistributedEthPerSlp) {\r\n          slpPlusDistributedEth =\r\n            slpPrice + slpItem.cumulativeDistributedEthPerSlp * ethPrice;\r\n        }\r\n      }\r\n\r\n      ret.push({\r\n        timestamp: btcPrices[i].timestamp,\r\n        syntheticPrice,\r\n        lpBtcPrice,\r\n        lpEthPrice,\r\n        lpMaticPrice,\r\n        slpPrice,\r\n        btcPrice,\r\n        ethPrice,\r\n        slpPlusFees,\r\n        slpPlusDistributedUsd,\r\n        slpPlusDistributedEth,\r\n\r\n        performanceLpEth: ((slpPrice / lpEthPrice) * 100).toFixed(1),\r\n        performanceLpEthCollectedFees: (\r\n          (slpPlusFees / lpEthPrice) *\r\n          100\r\n        ).toFixed(1),\r\n        performanceLpEthDistributedUsd: (\r\n          (slpPlusDistributedUsd / lpEthPrice) *\r\n          100\r\n        ).toFixed(1),\r\n        performanceLpEthDistributedEth: (\r\n          (slpPlusDistributedEth / lpEthPrice) *\r\n          100\r\n        ).toFixed(1),\r\n\r\n        performanceLpBtcCollectedFees: (\r\n          (slpPlusFees / lpBtcPrice) *\r\n          100\r\n        ).toFixed(1),\r\n\r\n        performanceSynthetic: ((slpPrice / syntheticPrice) * 100).toFixed(1),\r\n        performanceSyntheticCollectedFees: (\r\n          (slpPlusFees / syntheticPrice) *\r\n          100\r\n        ).toFixed(1),\r\n        performanceSyntheticDistributedUsd: (\r\n          (slpPlusDistributedUsd / syntheticPrice) *\r\n          100\r\n        ).toFixed(1),\r\n        performanceSyntheticDistributedEth: (\r\n          (slpPlusDistributedEth / syntheticPrice) *\r\n          100\r\n        ).toFixed(1),\r\n\r\n        slpApr,\r\n      });\r\n    }\r\n\r\n    return ret;\r\n  }, [btcPrices, ethPrices, slpData, feesData]);\r\n\r\n  return [slpPerformanceChartData];\r\n}\r\n\r\nexport function useReferralsData({\r\n  from = FIRST_DATE_TS,\r\n  to = NOW_TS,\r\n  chainName = \"fantom\",\r\n} = {}) {\r\n  const query = `{\r\n    globalStats(\r\n      first: 1000\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n      where: { period: \"daily\", timestamp_gte: ${from}, timestamp_lte: ${to} }\r\n    ) {\r\n      volume\r\n      volumeCumulative\r\n      totalRebateUsd\r\n      totalRebateUsdCumulative\r\n      discountUsd\r\n      discountUsdCumulative\r\n      referrersCount\r\n      referrersCountCumulative\r\n      referralCodesCount\r\n      referralCodesCountCumulative\r\n      referralsCount\r\n      referralsCountCumulative\r\n      timestamp\r\n    }\r\n  }`;\r\n\r\n  const subgraph = process.env.RAZZLE_REFERRAL_SUBGRAPH_URL;\r\n  const [graphData, loading, error] = useGraph(query, { subgraph });\r\n\r\n  const data = graphData\r\n    ? sortBy(graphData.globalStats, \"timestamp\").map((item) => {\r\n        const totalRebateUsd = item.totalRebateUsd / 1e30;\r\n        const discountUsd = item.discountUsd / 1e30;\r\n        return {\r\n          ...item,\r\n          volume: item.volume / 1e30,\r\n          volumeCumulative: item.volumeCumulative / 1e30,\r\n          totalRebateUsd,\r\n          totalRebateUsdCumulative: item.totalRebateUsdCumulative / 1e30,\r\n          discountUsd,\r\n          referrerRebateUsd: totalRebateUsd - discountUsd,\r\n          discountUsdCumulative: item.discountUsdCumulative / 1e30,\r\n          referralCodesCount: parseInt(item.referralCodesCount),\r\n          referralCodesCountCumulative: parseInt(\r\n            item.referralCodesCountCumulative\r\n          ),\r\n          referrersCount: parseInt(item.referrersCount),\r\n          referrersCountCumulative: parseInt(item.referrersCountCumulative),\r\n          referralsCount: parseInt(item.referralsCount),\r\n          referralsCountCumulative: parseInt(item.referralsCountCumulative),\r\n        };\r\n      })\r\n    : null;\r\n\r\n  return [data, loading, error];\r\n}\r\n","import React, { useEffect, useState, useCallback, useMemo } from \"react\";\r\nimport * as ethers from \"ethers\";\r\nimport moment from \"moment\";\r\nimport { RiLoader5Fill } from \"react-icons/ri\";\r\nimport cx from \"classnames\";\r\n\r\nimport {\r\n  yaxisFormatterNumber,\r\n  yaxisFormatterPercent,\r\n  yaxisFormatter,\r\n  tooltipLabelFormatter,\r\n  tooltipLabelFormatterUnits,\r\n  tooltipFormatter,\r\n  tooltipFormatterNumber,\r\n  tooltipFormatterPercent,\r\n  formatNumber,\r\n  CHART_HEIGHT,\r\n  YAXIS_WIDTH,\r\n  COLORS\r\n} from \"../helpers\";\r\n\r\nimport {\r\n  LineChart,\r\n  BarChart,\r\n  Line,\r\n  Bar,\r\n  Label,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n  ReferenceLine,\r\n  Area,\r\n  AreaChart,\r\n  ComposedChart,\r\n  Cell,\r\n  PieChart,\r\n  Pie,\r\n} from \"recharts\";\r\n\r\nimport ChartWrapper from \"../components/ChartWrapper\";\r\nimport VolumeChart from \"../components/VolumeChart\";\r\nimport FeesChart from \"../components/FeesChart\";\r\nimport GenericChart from \"../components/GenericChart\";\r\n\r\nimport {\r\n  useVolumeData,\r\n  useTotalVolumeFromServer,\r\n  useVolumeDataFromServer,\r\n  useFeesData,\r\n  useSlpData,\r\n  useAumPerformanceData,\r\n  useCoingeckoPrices,\r\n  useSlpPerformanceData,\r\n  useTradersData,\r\n  useSwapSources,\r\n  useFundingRateData,\r\n  useUsersData,\r\n  useLastSubgraphBlock,\r\n  useLastBlock,\r\n} from \"../dataProvider\";\r\n\r\nconst { BigNumber } = ethers;\r\nconst { formatUnits } = ethers.utils;\r\nconst NOW = Math.floor(Date.now() / 1000);\r\n\r\nfunction Fantom(props) {\r\n  const DEFAULT_GROUP_PERIOD = 86400;\r\n  const [groupPeriod, setGroupPeriod] = useState(DEFAULT_GROUP_PERIOD);\r\n\r\n  const [fromValue, setFromValue] = useState();\r\n  const [toValue, setToValue] = useState();\r\n\r\n  const { mode } = props;\r\n\r\n  const setDateRange = useCallback(\r\n    (range) => {\r\n      setFromValue(\r\n        new Date(Date.now() - range * 1000).toISOString().slice(0, 10)\r\n      );\r\n      setToValue(undefined);\r\n    },\r\n    [setFromValue, setToValue]\r\n  );\r\n\r\n  const from = fromValue ? +new Date(fromValue) / 1000 : undefined;\r\n  const to = toValue ? +new Date(toValue) / 1000 : NOW;\r\n\r\n  const params = { from, to, groupPeriod };\r\n\r\n  const [fundingRateData, fundingRateLoading] = useFundingRateData(params);\r\n  // const [volumeData, volumeLoading] = useVolumeDataFromServer(params);\r\n  const [volumeData, totalVolume, volumeLoading] = useVolumeData(params);\r\n  //const [totalVolume] = useTotalVolumeFromServer();\r\n  const totalVolumeDelta = useMemo(() => {\r\n    if (!volumeData || volumeData.length == 0) {\r\n      return null;\r\n    }\r\n    return volumeData[volumeData.length - 1].all;\r\n  }, [volumeData]);\r\n\r\n  const [feesData, feesLoading] = useFeesData(params);\r\n  const [totalFees, totalFeesDelta] = useMemo(() => {\r\n    if (!feesData) {\r\n      return [];\r\n    }\r\n    const total = feesData[feesData.length - 1]?.cumulative;\r\n    const delta = total - feesData[feesData.length - 2]?.cumulative;\r\n    return [total, delta];\r\n  }, [feesData]);\r\n\r\n  const [slpData, slpLoading] = useSlpData(params);\r\n  const [totalAum, totalAumDelta] = useMemo(() => {\r\n    if (!slpData) {\r\n      return [];\r\n    }\r\n    const total = slpData[slpData.length - 1]?.aum;\r\n    const delta = total - slpData[slpData.length - 2]?.aum;\r\n    return [total, delta];\r\n  }, [slpData]);\r\n\r\n  const [aumPerformanceData, aumPerformanceLoading] =\r\n    useAumPerformanceData(params);\r\n\r\n  const [slpPerformanceData, slpPerformanceLoading] = useSlpPerformanceData(\r\n    slpData,\r\n    feesData,\r\n    params\r\n  );\r\n\r\n  const [tradersData, tradersLoading] = useTradersData(params);\r\n  const [openInterest, openInterestDelta] = useMemo(() => {\r\n    if (!tradersData) {\r\n      return [];\r\n    }\r\n    const total = tradersData.data[tradersData.data.length - 1]?.openInterest;\r\n    const delta =\r\n      total - tradersData.data[tradersData.data.length - 2]?.openInterest;\r\n    return [total, delta];\r\n  }, [tradersData]);\r\n  const [swapSources, swapSourcesLoading] = useSwapSources(params);\r\n  const swapSourcesKeys = Object.keys(\r\n    (swapSources || []).reduce((memo, el) => {\r\n      Object.keys(el).forEach((key) => {\r\n        if (key === \"all\" || key === \"timestamp\") return;\r\n        memo[key] = true;\r\n      });\r\n      return memo;\r\n    }, {})\r\n  );\r\n\r\n  const [usersData, usersLoading] = useUsersData(params);\r\n  const [totalUsers, totalUsersDelta] = useMemo(() => {\r\n    if (!usersData) {\r\n      return [null, null];\r\n    }\r\n    const total = usersData[usersData.length - 1]?.uniqueCountCumulative;\r\n    const prevTotal = usersData[usersData.length - 2]?.uniqueCountCumulative;\r\n    const delta = total && prevTotal ? total - prevTotal : null;\r\n    return [total, delta];\r\n  }, [usersData]);\r\n\r\n  const [lastSubgraphBlock] = useLastSubgraphBlock();\r\n  const [lastBlock] = useLastBlock();\r\n\r\n  const isObsolete =\r\n    lastSubgraphBlock &&\r\n    lastBlock &&\r\n    lastBlock.timestamp - lastSubgraphBlock.timestamp > 3600;\r\n\r\n  const [isExperiment, setIsExperiment] = useState(false);\r\n  useEffect(() => {\r\n    setIsExperiment(window.localStorage.getItem(\"experiment\"));\r\n  }, [setIsExperiment]);\r\n\r\n  const showForm = false;\r\n\r\n  return (\r\n    <div className=\"Home\">\r\n      <h1>Analytics / Fantom</h1>\r\n      {lastSubgraphBlock && lastBlock && (\r\n        <p\r\n          className={cx(\"page-description\", { warning: isObsolete })}\r\n          style={{ marginTop: \"-1rem\" }}\r\n        >\r\n          {isObsolete && \"Data is obsolete. \"}\r\n          Updated {moment(lastSubgraphBlock.timestamp * 1000).fromNow()}\r\n          &nbsp;at block{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            href={`https://ftmscan.com/block/${lastSubgraphBlock.number}`}\r\n          >\r\n            {lastSubgraphBlock.number}\r\n          </a>\r\n        </p>\r\n      )}\r\n      {showForm && (\r\n        <div className=\"form\">\r\n          <p>\r\n            <label>Period</label>\r\n            <input\r\n              type=\"date\"\r\n              value={fromValue}\r\n              onChange={(evt) => setFromValue(evt.target.value)}\r\n            />\r\n            &nbsp;—&nbsp;\r\n            <input\r\n              type=\"date\"\r\n              value={toValue}\r\n              onChange={(evt) => setToValue(evt.target.value)}\r\n            />\r\n            <button onClick={(evt) => setDateRange(86400 * 29)}>30 days</button>\r\n            <button onClick={(evt) => setDateRange(86400 * 6)}>7 days</button>\r\n          </p>\r\n        </div>\r\n      )}\r\n      <div className=\"chart-grid\">\r\n        <div className=\"chart-cell stats\">\r\n          {totalVolume ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Volume</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalVolume, { currency: true })}\r\n                {totalVolumeDelta && (\r\n                  <span\r\n                    className=\"total-stat-delta plus\"\r\n                    title=\"Change since previous day\"\r\n                  >\r\n                    +\r\n                    {formatNumber(totalVolumeDelta, {\r\n                      currency: true,\r\n                      compact: true,\r\n                    })}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </>\r\n          ) : volumeLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Volume</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalFees ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Fees</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalFees, { currency: true })}\r\n                <span\r\n                  className=\"total-stat-delta plus\"\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  +\r\n                  {formatNumber(totalFeesDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : feesLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Fees</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalAum ? (\r\n            <>\r\n              <div className=\"total-stat-label\">SLP Pool</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalAum, { currency: true })}\r\n                <span\r\n                  className={cx(\r\n                    \"total-stat-delta\",\r\n                    totalAumDelta > 0 ? \"plus\" : \"minus\"\r\n                  )}\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  {totalAumDelta > 0 ? \"+\" : \"\"}\r\n                  {formatNumber(totalAumDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {totalUsers ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Users</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(totalUsers)}\r\n                <span\r\n                  className=\"total-stat-delta plus\"\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  +{formatNumber(totalUsersDelta)}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : usersLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Total Users</div>\r\n              <div className=\"total-stat-value\">{formatNumber(0)}</div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell stats\">\r\n          {openInterest ? (\r\n            <>\r\n              <div className=\"total-stat-label\">Open Interest</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(openInterest, { currency: true })}\r\n                <span\r\n                  className={cx(\r\n                    \"total-stat-delta\",\r\n                    openInterestDelta > 0 ? \"plus\" : \"minus\"\r\n                  )}\r\n                  title=\"Change since previous day\"\r\n                >\r\n                  {openInterestDelta > 0 ? \"+\" : \"\"}\r\n                  {formatNumber(openInterestDelta, {\r\n                    currency: true,\r\n                    compact: true,\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </>\r\n          ) : tradersLoading ? (\r\n            <RiLoader5Fill size=\"3em\" className=\"loader\" />\r\n          ) : (\r\n            <>\r\n              <div className=\"total-stat-label\">Open Interest</div>\r\n              <div className=\"total-stat-value\">\r\n                {formatNumber(0, { currency: true })}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <VolumeChart\r\n            data={volumeData}\r\n            loading={volumeLoading}\r\n            chartHeight={CHART_HEIGHT}\r\n            yaxisWidth={YAXIS_WIDTH}\r\n            xaxisTickFormatter={tooltipLabelFormatter}\r\n            yaxisTickFormatter={yaxisFormatter}\r\n            tooltipLabelFormatter={tooltipLabelFormatter}\r\n            tooltipFormatter={tooltipFormatter}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <FeesChart\r\n            data={feesData}\r\n            loading={feesLoading}\r\n            chartHeight={CHART_HEIGHT}\r\n            yaxisWidth={YAXIS_WIDTH}\r\n            xaxisTickFormatter={tooltipLabelFormatter}\r\n            yaxisTickFormatter={yaxisFormatter}\r\n            tooltipLabelFormatter={tooltipLabelFormatter}\r\n            tooltipFormatter={tooltipFormatter}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"SKULL & Slp Supply\"\r\n            loading={slpLoading}\r\n            data={slpData}\r\n            csvFields={[{ key: \"aum\" }, { key: \"slpSupply\" }]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={slpData} syncId=\"syncSlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"aum\"\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  unit=\"$\"\r\n                  dot={false}\r\n                  dataKey=\"aum\"\r\n                  stackId=\"a\"\r\n                  name=\"SKULL\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  dot={false}\r\n                  dataKey=\"slpSupply\"\r\n                  stackId=\"a\"\r\n                  name=\"SLP Supply\"\r\n                  stroke={COLORS[1]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          </ChartWrapper>\r\n        </div>\r\n\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Slp Performance\"\r\n            loading={slpLoading}\r\n            data={slpPerformanceData}\r\n            csvFields={[\r\n              { key: \"syntheticPrice\" },\r\n              { key: \"slpPrice\" },\r\n              { key: \"slpPlusFees\" },\r\n              { key: \"lpBtcPrice\" },\r\n              { key: \"lpEthPrice\" },\r\n              { key: \"performanceSyntheticCollectedFees\" },\r\n              { key: \"indexBtcCount\" },\r\n              { key: \"indexEthCount\" },\r\n              { key: \"indexAvaxCount\" },\r\n              { key: \"indexStableCount\" },\r\n              { key: \"BTC_WEIGHT\" },\r\n              { key: \"ETH_WEIGHT\" },\r\n              { key: \"FTM_WEIGHT\" },\r\n              { key: \"STABLE_WEIGHT\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={slpPerformanceData} syncId=\"syncSlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  domain={[80, 180]}\r\n                  unit=\"%\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceLpBtcCollectedFees\"\r\n                  name=\"% LP BTC-USDC (w/ fees)\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceLpEthCollectedFees\"\r\n                  name=\"% LP ETH-USDC (w/ fees)\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  name=\"% Index (w/ fees)\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>\r\n                <span style={{ color: COLORS[0] }}>% of Index (with fees)</span>{\" \"}\r\n                is SLP with fees / Index Price * 100. Index is a basket of 25%\r\n                BTC, 25% ETH, 50% USDC rebalanced once&nbsp;a&nbsp;day\r\n                <br />\r\n                <span style={{ color: COLORS[4] }}>\r\n                  % of LP ETH-USDC (with fees)\r\n                </span>{\" \"}\r\n                is SLP Price with fees / LP ETH-USDC * 100\r\n                <br />\r\n              </p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Slp Price Comparison\"\r\n            loading={slpLoading}\r\n            data={slpPerformanceData}\r\n            csvFields={[\r\n              { key: \"syntheticPrice\" },\r\n              { key: \"slpPrice\" },\r\n              { key: \"slpPlusFees\" },\r\n              { key: \"lpBtcPrice\" },\r\n              { key: \"lpEthPrice\" },\r\n              { key: \"performanceSyntheticCollectedFees\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n              <LineChart data={slpPerformanceData} syncId=\"syncSlp\">\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  domain={[60, 210]}\r\n                  unit=\"%\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <YAxis\r\n                  dataKey=\"slpPrice\"\r\n                  domain={[0.4, 1.7]}\r\n                  orientation=\"right\"\r\n                  yAxisId=\"right\"\r\n                  tickFormatter={yaxisFormatterNumber}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatterNumber}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceLpBtcCollectedFees\"\r\n                  name=\"% LP BTC-USDC (w/ fees)\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceLpEthCollectedFees\"\r\n                  name=\"% LP ETH-USDC (w/ fees)\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n                <Line\r\n                  dot={false}\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"%\"\r\n                  strokeWidth={2}\r\n                  dataKey=\"performanceSyntheticCollectedFees\"\r\n                  name=\"% Index (w/ fees)\"\r\n                  stroke={COLORS[0]}\r\n                />\r\n\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"syntheticPrice\"\r\n                  name=\"Index Price\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"slpPrice\"\r\n                  name=\"Slp Price\"\r\n                  stroke={COLORS[1]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"slpPlusFees\"\r\n                  name=\"Slp w/ fees\"\r\n                  stroke={COLORS[3]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"lpBtcPrice\"\r\n                  name=\"LP BTC-USDC\"\r\n                  stroke={COLORS[2]}\r\n                />\r\n                <Line\r\n                  isAnimationActive={false}\r\n                  type=\"monotone\"\r\n                  unit=\"$\"\r\n                  strokeWidth={1}\r\n                  yAxisId=\"right\"\r\n                  dot={false}\r\n                  dataKey=\"lpEthPrice\"\r\n                  name=\"LP ETH-USDC\"\r\n                  stroke={COLORS[4]}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>\r\n                <span style={{ color: COLORS[3] }}>Slp with fees</span> is\r\n                based on SLP share of fees received\r\n                {/* based on SLP share of fees received and excluding esSKULL rewards */}\r\n                <br />\r\n                <span style={{ color: COLORS[0] }}>\r\n                  % of Index (with fees)\r\n                </span>{\" \"}\r\n                is Slp with fees / Index Price * 100\r\n                <br />\r\n                <span style={{ color: COLORS[4] }}>\r\n                  % of LP ETH-USDC (with fees)\r\n                </span>{\" \"}\r\n                is Slp Price with fees / LP ETH-USDC * 100\r\n                <br />\r\n                <span style={{ color: COLORS[2] }}>Index Price</span> is 25%\r\n                BTC, 25% ETH, 50% USDC\r\n              </p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        {isExperiment && (\r\n          <div className=\"chart-cell experiment\">\r\n            <ChartWrapper title=\"Performance vs. Index\" loading={slpLoading}>\r\n              <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n                <LineChart data={slpPerformanceData} syncId=\"syncSlp\">\r\n                  <CartesianGrid strokeDasharray=\"10 10\" />\r\n                  <XAxis\r\n                    dataKey=\"timestamp\"\r\n                    tickFormatter={tooltipLabelFormatter}\r\n                    minTickGap={30}\r\n                  />\r\n                  <YAxis\r\n                    dataKey=\"performanceSyntheticCollectedFees\"\r\n                    domain={[80, 120]}\r\n                    unit=\"%\"\r\n                    tickFormatter={yaxisFormatterNumber}\r\n                    width={YAXIS_WIDTH}\r\n                  />\r\n                  <Tooltip\r\n                    formatter={tooltipFormatterNumber}\r\n                    labelFormatter={tooltipLabelFormatter}\r\n                    contentStyle={{ textAlign: \"left\" }}\r\n                  />\r\n                  <Legend />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticCollectedFees\"\r\n                    name=\"Collected Fees\"\r\n                    stroke={COLORS[0]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticDistributedUsd\"\r\n                    name=\"Distributed Usd\"\r\n                    stroke={COLORS[1]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSyntheticDistributedEth\"\r\n                    name=\"Distributed Eth\"\r\n                    stroke={COLORS[2]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceSynthetic\"\r\n                    name=\"No Fees\"\r\n                    stroke={COLORS[3]}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </ChartWrapper>\r\n          </div>\r\n        )}\r\n        {isExperiment && (\r\n          <div className=\"chart-cell experiment\">\r\n            <ChartWrapper title=\"Performance vs. ETH LP\" loading={slpLoading}>\r\n              <ResponsiveContainer width=\"100%\" height={CHART_HEIGHT}>\r\n                <LineChart data={slpPerformanceData} syncId=\"syncSlp\">\r\n                  <CartesianGrid strokeDasharray=\"10 10\" />\r\n                  <XAxis\r\n                    dataKey=\"timestamp\"\r\n                    tickFormatter={tooltipLabelFormatter}\r\n                    minTickGap={30}\r\n                  />\r\n                  <YAxis\r\n                    dataKey=\"performanceLpEthCollectedFees\"\r\n                    domain={[80, 120]}\r\n                    unit=\"%\"\r\n                    tickFormatter={yaxisFormatterNumber}\r\n                    width={YAXIS_WIDTH}\r\n                  />\r\n                  <Tooltip\r\n                    formatter={tooltipFormatterNumber}\r\n                    labelFormatter={tooltipLabelFormatter}\r\n                    contentStyle={{ textAlign: \"left\" }}\r\n                  />\r\n                  <Legend />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthCollectedFees\"\r\n                    name=\"Collected Fees\"\r\n                    stroke={COLORS[0]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthDistributedUsd\"\r\n                    name=\"Distributed Usd\"\r\n                    stroke={COLORS[1]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEthDistributedEth\"\r\n                    name=\"Distributed Eth\"\r\n                    stroke={COLORS[2]}\r\n                  />\r\n                  <Line\r\n                    isAnimationActive={false}\r\n                    dot={false}\r\n                    type=\"monotone\"\r\n                    unit=\"%\"\r\n                    strokeWidth={2}\r\n                    dataKey=\"performanceLpEth\"\r\n                    name=\"No Fees\"\r\n                    stroke={COLORS[3]}\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </ChartWrapper>\r\n          </div>\r\n        )}\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Traders Net PnL\"\r\n            loading={tradersLoading}\r\n            data={tradersData?.data}\r\n            csvFields={[\r\n              { key: \"pnl\", name: \"Net PnL\" },\r\n              { key: \"pnlCumulative\", name: \"Cumulative PnL\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer\r\n              width=\"100%\"\r\n              syncId=\"tradersId\"\r\n              height={CHART_HEIGHT}\r\n            >\r\n              <ComposedChart data={tradersData?.data}>\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxAbsOfPnlAndCumulativePnl * 1.05,\r\n                    tradersData?.stats.maxAbsOfPnlAndCumulativePnl * 1.05,\r\n                  ]}\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatter}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill={mode == \"dark\" ? \"#FFFFFF\" : \"#000000\"}\r\n                  dot={false}\r\n                  dataKey=\"pnl\"\r\n                  name=\"Net PnL\"\r\n                >\r\n                  {(tradersData?.data || []).map((item, i) => {\r\n                    return (\r\n                      <Cell\r\n                        key={`cell-${i}`}\r\n                        fill={item.pnl > 0 ? \"#22c761\" : \"#f93333\"}\r\n                      />\r\n                    );\r\n                  })}\r\n                </Bar>\r\n                <Line\r\n                  type=\"monotone\"\r\n                  strokeWidth={2}\r\n                  stroke={COLORS[4]}\r\n                  dataKey=\"pnlCumulative\"\r\n                  name=\"Cumulative PnL\"\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>Considers settled (closed) positions</p>\r\n              <p>Fees are not factored into PnL</p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <ChartWrapper\r\n            title=\"Traders Profit vs. Loss\"\r\n            loading={tradersLoading}\r\n            data={tradersData?.data}\r\n            csvFields={[\r\n              { key: \"profit\" },\r\n              { key: \"loss\" },\r\n              { key: \"profitCumulative\" },\r\n              { key: \"lossCumulative\" },\r\n            ]}\r\n          >\r\n            <ResponsiveContainer\r\n              width=\"100%\"\r\n              syncId=\"tradersId\"\r\n              height={CHART_HEIGHT}\r\n            >\r\n              <ComposedChart data={tradersData?.data} barGap={0}>\r\n                <CartesianGrid strokeDasharray=\"10 10\" />\r\n                <XAxis\r\n                  dataKey=\"timestamp\"\r\n                  tickFormatter={tooltipLabelFormatter}\r\n                  minTickGap={30}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxProfitLoss * 1.05,\r\n                    tradersData?.stats.maxProfitLoss * 1.05,\r\n                  ]}\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <YAxis\r\n                  domain={[\r\n                    -tradersData?.stats.maxCumulativeProfitLoss * 1.1,\r\n                    tradersData?.stats.maxCumulativeProfitLoss * 1.1,\r\n                  ]}\r\n                  orientation=\"right\"\r\n                  yAxisId=\"right\"\r\n                  tickFormatter={yaxisFormatter}\r\n                  width={YAXIS_WIDTH}\r\n                />\r\n                <Tooltip\r\n                  formatter={tooltipFormatter}\r\n                  labelFormatter={tooltipLabelFormatter}\r\n                  contentStyle={{ textAlign: \"left\" }}\r\n                />\r\n                <Legend />\r\n                <Area\r\n                  yAxisId=\"right\"\r\n                  type=\"monotone\"\r\n                  stroke={0}\r\n                  fill=\"#22c761\"\r\n                  fillOpacity=\"0.4\"\r\n                  dataKey=\"profitCumulative\"\r\n                  name=\"Cumulative Profit\"\r\n                />\r\n                <Area\r\n                  yAxisId=\"right\"\r\n                  type=\"monotone\"\r\n                  stroke={0}\r\n                  fill=\"#f93333\"\r\n                  fillOpacity=\"0.4\"\r\n                  dataKey=\"lossCumulative\"\r\n                  name=\"Cumulative Loss\"\r\n                />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill=\"#22c761\"\r\n                  dot={false}\r\n                  dataKey=\"profit\"\r\n                  name=\"Profit\"\r\n                />\r\n                <Bar\r\n                  type=\"monotone\"\r\n                  fill=\"#f93333\"\r\n                  dot={false}\r\n                  dataKey=\"loss\"\r\n                  name=\"Loss\"\r\n                />\r\n              </ComposedChart>\r\n            </ResponsiveContainer>\r\n            <div className=\"chart-description\">\r\n              <p>Considers settled (closed) positions</p>\r\n              <p>Fees are not factored into PnL</p>\r\n            </div>\r\n          </ChartWrapper>\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={fundingRateLoading}\r\n            title=\"Borrowing Rate Annualized\"\r\n            data={fundingRateData}\r\n            yaxisDataKey=\"ETH\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[\r\n              { key: \"FTM\", color: \"#7C43DA\" },\r\n              { key: \"ETH\", color: \"#6185F5\" },\r\n              { key: \"BTC\", color: \"#F7931A\" },\r\n              { key: \"USDC\", color: \"#2775CA\" },\r\n              { key: \"USDT\", color: \"#67B18A\" },\r\n              { key: \"DAI\", color: \"#FAC044\" },\r\n            ]}\r\n            type=\"Line\"\r\n            yaxisDomain={[0, 90 /* ~87% is a maximum yearly borrow rate */]}\r\n            isCoinChart={true}\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={tradersLoading}\r\n            title=\"Open Interest\"\r\n            data={tradersData?.data.map((item) => ({\r\n              all: item.openInterest,\r\n              ...item,\r\n            }))}\r\n            yaxisDataKey=\"openInterest\"\r\n            items={[\r\n              { key: \"shortOpenInterest\", name: \"Short\", color: \"#f93333\" },\r\n              { key: \"longOpenInterest\", name: \"Long\", color: \"#22c761\" },\r\n            ]}\r\n            type=\"Bar\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={aumPerformanceLoading}\r\n            title=\"SKULL Performance Annualized\"\r\n            data={aumPerformanceData}\r\n            yaxisDataKey=\"apr\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[{ key: \"apr\", name: \"APR\", color: COLORS[0] }]}\r\n            description=\"Formula = Daily Fees / SLP Pool * 365 days * 100\"\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={aumPerformanceLoading}\r\n            title=\"SKULL Daily Usage\"\r\n            data={aumPerformanceData}\r\n            yaxisDataKey=\"usage\"\r\n            yaxisTickFormatter={yaxisFormatterPercent}\r\n            tooltipFormatter={tooltipFormatterPercent}\r\n            items={[{ key: \"usage\", name: \"Daily Usage\", color: COLORS[4] }]}\r\n            description=\"Formula = Daily Volume / SLP Pool * 100\"\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={usersLoading}\r\n            title=\"Unique Users\"\r\n            data={usersData}\r\n            yaxisDataKey=\"uniqueSum\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"uniqueSwapCount\", name: \"Swaps\" },\r\n              { key: \"uniqueMarginCount\", name: \"Margin trading\" },\r\n              { key: \"uniqueMintBurnCount\", name: \"Mint & Burn SLP\" },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={usersLoading}\r\n            title=\"New Users\"\r\n            data={usersData?.map((item) => ({ ...item, all: item.newCount }))}\r\n            yaxisDataKey=\"newCount\"\r\n            rightYaxisDataKey=\"uniqueCountCumulative\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"newSwapCount\", name: \"Swap\" },\r\n              { key: \"newMarginCount\", name: \"Margin trading\" },\r\n              { key: \"newMintBurnCount\", name: \"Mint & Burn\" },\r\n              {\r\n                key: \"uniqueCountCumulative\",\r\n                name: \"Cumulative\",\r\n                type: \"Line\",\r\n                yAxisId: \"right\",\r\n                strokeWidth: 2,\r\n                color: COLORS[4],\r\n              },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={usersLoading}\r\n            title=\"New vs. Existing Users\"\r\n            data={usersData?.map((item) => ({\r\n              ...item,\r\n              all: item.uniqueCount,\r\n            }))}\r\n            yaxisDataKey=\"uniqueCount\"\r\n            rightYaxisDataKey=\"oldPercent\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"newCount\", name: \"New\" },\r\n              { key: \"oldCount\", name: \"Existing\" },\r\n              {\r\n                key: \"oldPercent\",\r\n                name: \"Existing %\",\r\n                yAxisId: \"right\",\r\n                type: \"Line\",\r\n                strokeWidth: 2,\r\n                color: COLORS[4],\r\n                unit: \"%\",\r\n              },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            syncId=\"syncSlp\"\r\n            loading={usersLoading}\r\n            title=\"User Actions\"\r\n            data={(usersData || []).map((item) => ({\r\n              ...item,\r\n              all: item.actionCount,\r\n            }))}\r\n            yaxisDataKey=\"actionCount\"\r\n            yaxisTickFormatter={yaxisFormatterNumber}\r\n            tooltipFormatter={tooltipFormatterNumber}\r\n            tooltipLabelFormatter={tooltipLabelFormatterUnits}\r\n            items={[\r\n              { key: \"actionSwapCount\", name: \"Swaps\" },\r\n              { key: \"actionMarginCount\", name: \"Margin trading\" },\r\n              { key: \"actionMintBurnCount\", name: \"Mint & Burn SLP\" },\r\n            ]}\r\n            type=\"Composed\"\r\n          />\r\n        </div>\r\n        <div className=\"chart-cell\">\r\n          <GenericChart\r\n            loading={swapSourcesLoading}\r\n            title=\"Swap Sources\"\r\n            data={swapSources}\r\n            items={swapSourcesKeys.map((key) => ({ key }))}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fantom;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAKA;AAMA;AACA;AACA;AAEA;AACA;AAQA;AAQA;AAOA;AAEA;AAUA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AAGA;AAIA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AAKA;AAKA;AACA;AAIA;AAIA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACt2CA;AACA;AACA;AACA;AACA;AAEA;AAeA;AAsBA;AACA;AACA;AACA;AAEA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAEA;AAGA;AACA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;;;;A","sourceRoot":""}